//
// VoxelsCore V2
// by KryKom 2024
//

using Kolors;
using VoxelsCoreSharp.data;
using VoxelsCoreSharp.world.minecraft;
using VoxelsCoreSharp.world.minecraft.block;
using VoxelsCoreSharp.world.voxelTypes;

namespace VoxelsCoreSharp.world;

public class VoxelRegistry : Registry<Voxel> { // TODO: add more blocks, theres just eleven out of like a thousand
    
    public static readonly Voxel AIR = register("air", new AirVoxel());
    public static readonly Voxel STONE = register("stone", new StoneVoxel(MaterialColor.STONE));
    public static readonly Voxel GRANITE = register("granite", new StoneVoxel(MaterialColor.DIRT));
    public static readonly Voxel POLISHED_GRANITE = register("polished_granite", new StoneVoxel(MaterialColor.DIRT));
    public static readonly Voxel DIORITE = register("diorite", new StoneVoxel(MaterialColor.QUARTZ));
    public static readonly Voxel POLISHED_DIORITE = register("polished_diorite", new StoneVoxel(MaterialColor.QUARTZ));
    public static readonly Voxel ANDESITE = register("andesite", new StoneVoxel(MaterialColor.STONE));
    public static readonly Voxel POLISHED_ANDESITE = register("polished_andesite", new StoneVoxel(MaterialColor.STONE)); 
    public static readonly Voxel GRASS_BLOCK = register("grass_block", new Voxel(MaterialColor.GRASS)); 
    public static readonly Voxel DIRT = register("dirt", new Voxel(MaterialColor.DIRT)); /*
    public static readonly Voxel COARSE_DIRT = register("coarse_dirt", new Voxel(VoxelBehaviour.Properties.of(Material.DIRT, MaterialColor.DIRT).strength(0.5F).sound(SoundType.GRAVEL)));
    public static readonly Voxel PODZOL = register("podzol", new SnowyDirtVoxel(VoxelBehaviour.Properties.of(Material.DIRT, MaterialColor.PODZOL).strength(0.5F).sound(SoundType.GRAVEL)));
    public static readonly Voxel COBBLESTONE = register("cobblestone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(2.0F, 6.0F))); */
    public static readonly Voxel OAK_PLANKS = register("oak_planks", new Voxel(MaterialColor.WOOD));/*
    public static readonly Voxel SPRUCE_PLANKS = register("spruce_planks", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BIRCH_PLANKS = register("birch_planks", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel JUNGLE_PLANKS = register("jungle_planks", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel ACACIA_PLANKS = register("acacia_planks", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel DARK_OAK_PLANKS = register("dark_oak_planks", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel MANGROVE_PLANKS = register("mangrove_planks", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BAMBOO_PLANKS = register("bamboo_planks", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).strength(2.0F, 3.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel BAMBOO_MOSAIC = register("bamboo_mosaic", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).strength(2.0F, 3.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel OAK_SAPLING = register("oak_sapling", new SaplingVoxel(new OakTreeGrower(), VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel SPRUCE_SAPLING = register("spruce_sapling", new SaplingVoxel(new SpruceTreeGrower(), VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel BIRCH_SAPLING = register("birch_sapling", new SaplingVoxel(new BirchTreeGrower(), VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel JUNGLE_SAPLING = register("jungle_sapling", new SaplingVoxel(new JungleTreeGrower(), VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel ACACIA_SAPLING = register("acacia_sapling", new SaplingVoxel(new AcaciaTreeGrower(), VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel DARK_OAK_SAPLING = register("dark_oak_sapling", new SaplingVoxel(new DarkOakTreeGrower(), VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel MANGROVE_PROPAGULE = register("mangrove_propagule", new MangrovePropaguleVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel BEDROCK = register("bedrock", new Voxel(VoxelBehaviour.Properties.of(Material.STONE).strength(-1.0F, 3600000.0F).noLootTable().isValidSpawn(Voxels::never)));
    public static readonly Voxel WATER = register("water", new LiquidVoxel(Fluids.WATER, VoxelBehaviour.Properties.of(Material.WATER).noCollission().strength(100.0F).noLootTable()));
    public static readonly Voxel LAVA = register("lava", new LiquidVoxel(Fluids.LAVA, VoxelBehaviour.Properties.of(Material.LAVA).noCollission().randomTicks().strength(100.0F).lightLevel((p_220867_) => { 
        return 15;
    }).noLootTable()));
    public static readonly Voxel SAND = register("sand", new SandVoxel(14406560, VoxelBehaviour.Properties.of(Material.SAND, MaterialColor.SAND).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel RED_SAND = register("red_sand", new SandVoxel(11098145, VoxelBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_ORANGE).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel GRAVEL = register("gravel", new GravelVoxel(VoxelBehaviour.Properties.of(Material.SAND, MaterialColor.STONE).strength(0.6F).sound(SoundType.GRAVEL)));
    public static readonly Voxel GOLD_ORE = register("gold_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)));
    public static readonly Voxel DEEPSLATE_GOLD_ORE = register("deepslate_gold_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(GOLD_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
    public static readonly Voxel IRON_ORE = register("iron_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)));
    public static readonly Voxel DEEPSLATE_IRON_ORE = register("deepslate_iron_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(IRON_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
    public static readonly Voxel COAL_ORE = register("coal_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F), UniformInt.of(0, 2)));
    public static readonly Voxel DEEPSLATE_COAL_ORE = register("deepslate_coal_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(COAL_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE), UniformInt.of(0, 2)));
    public static readonly Voxel NETHER_GOLD_ORE = register("nether_gold_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(3.0F, 3.0F).sound(SoundType.NETHER_GOLD_ORE), UniformInt.of(0, 1)));*/
    public static readonly Voxel OAK_LOG = register("oak_log", new Voxel(MaterialColor.PODZOL));/*
    public static readonly Voxel SPRUCE_LOG = register("spruce_log", log(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN));
    public static readonly Voxel BIRCH_LOG = register("birch_log", log(MaterialColor.SAND, MaterialColor.QUARTZ));
    public static readonly Voxel JUNGLE_LOG = register("jungle_log", log(MaterialColor.DIRT, MaterialColor.PODZOL));
    public static readonly Voxel ACACIA_LOG = register("acacia_log", log(MaterialColor.COLOR_ORANGE, MaterialColor.STONE));
    public static readonly Voxel DARK_OAK_LOG = register("dark_oak_log", log(MaterialColor.COLOR_BROWN, MaterialColor.COLOR_BROWN));
    public static readonly Voxel MANGROVE_LOG = register("mangrove_log", log(MaterialColor.COLOR_RED, MaterialColor.PODZOL));
    public static readonly Voxel MANGROVE_ROOTS = register("mangrove_roots", new MangroveRootsVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(0.7F).randomTicks().sound(SoundType.MANGROVE_ROOTS).noOcclusion().isSuffocating(Voxels::never).isViewVoxeling(Voxels::never).noOcclusion()));
    public static readonly Voxel MUDDY_MANGROVE_ROOTS = register("muddy_mangrove_roots", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.DIRT, MaterialColor.PODZOL).strength(0.7F).sound(SoundType.MUDDY_MANGROVE_ROOTS)));
    public static readonly Voxel BAMBOO_BLOCK = register("bamboo_block", log(MaterialColor.COLOR_YELLOW, MaterialColor.PLANT, SoundType.BAMBOO_WOOD, FeatureFlags.UPDATE_1_20));
    public static readonly Voxel STRIPPED_SPRUCE_LOG = register("stripped_spruce_log", log(MaterialColor.PODZOL, MaterialColor.PODZOL));
    public static readonly Voxel STRIPPED_BIRCH_LOG = register("stripped_birch_log", log(MaterialColor.SAND, MaterialColor.SAND));
    public static readonly Voxel STRIPPED_JUNGLE_LOG = register("stripped_jungle_log", log(MaterialColor.DIRT, MaterialColor.DIRT));
    public static readonly Voxel STRIPPED_ACACIA_LOG = register("stripped_acacia_log", log(MaterialColor.COLOR_ORANGE, MaterialColor.COLOR_ORANGE));
    public static readonly Voxel STRIPPED_DARK_OAK_LOG = register("stripped_dark_oak_log", log(MaterialColor.COLOR_BROWN, MaterialColor.COLOR_BROWN));*/
    public static readonly Voxel STRIPPED_OAK_LOG = register("stripped_oak_log", new Voxel(MaterialColor.WOOD));/*
    public static readonly Voxel STRIPPED_MANGROVE_LOG = register("stripped_mangrove_log", log(MaterialColor.COLOR_RED, MaterialColor.COLOR_RED));
    public static readonly Voxel STRIPPED_BAMBOO_BLOCK = register("stripped_bamboo_block", log(MaterialColor.COLOR_YELLOW, MaterialColor.COLOR_YELLOW, SoundType.BAMBOO_WOOD, FeatureFlags.UPDATE_1_20));
    public static readonly Voxel OAK_WOOD = register("oak_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel SPRUCE_WOOD = register("spruce_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BIRCH_WOOD = register("birch_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel JUNGLE_WOOD = register("jungle_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel ACACIA_WOOD = register("acacia_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel DARK_OAK_WOOD = register("dark_oak_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel MANGROVE_WOOD = register("mangrove_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel STRIPPED_OAK_WOOD = register("stripped_oak_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel STRIPPED_SPRUCE_WOOD = register("stripped_spruce_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel STRIPPED_BIRCH_WOOD = register("stripped_birch_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel STRIPPED_JUNGLE_WOOD = register("stripped_jungle_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel STRIPPED_ACACIA_WOOD = register("stripped_acacia_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel STRIPPED_DARK_OAK_WOOD = register("stripped_dark_oak_wood", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
    public static readonly Voxel STRIPPED_MANGROVE_WOOD = register("stripped_mangrove_wood", log(MaterialColor.COLOR_RED, MaterialColor.COLOR_RED));*/
    public static readonly Voxel OAK_LEAVES = register("oak_leaves", new Voxel(MaterialColor.PLANT));/*
    public static readonly Voxel SPRUCE_LEAVES = register("spruce_leaves", leaves());
    public static readonly Voxel BIRCH_LEAVES = register("birch_leaves", leaves());
    public static readonly Voxel JUNGLE_LEAVES = register("jungle_leaves", leaves());
    public static readonly Voxel ACACIA_LEAVES = register("acacia_leaves", leaves());
    public static readonly Voxel DARK_OAK_LEAVES = register("dark_oak_leaves", leaves());
    public static readonly Voxel MANGROVE_LEAVES = register("mangrove_leaves", new MangroveLeavesVoxel(VoxelBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(Voxels::ocelotOrParrot).isSuffocating(Voxels::never).isViewVoxeling(Voxels::never)));
    public static readonly Voxel AZALEA_LEAVES = register("azalea_leaves", leaves(SoundType.AZALEA_LEAVES));
    public static readonly Voxel FLOWERING_AZALEA_LEAVES = register("flowering_azalea_leaves", leaves(SoundType.AZALEA_LEAVES));
    public static readonly Voxel SPONGE = register("sponge", new SpongeVoxel(VoxelBehaviour.Properties.of(Material.SPONGE).strength(0.6F).sound(SoundType.GRASS)));
    public static readonly Voxel WET_SPONGE = register("wet_sponge", new WetSpongeVoxel(VoxelBehaviour.Properties.of(Material.SPONGE).strength(0.6F).sound(SoundType.GRASS)));
    public static readonly Voxel GLASS = register("glass", new GlassVoxel(VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(Voxels::never).isRedstoneConductor(Voxels::never).isSuffocating(Voxels::never).isViewVoxeling(Voxels::never)));
    public static readonly Voxel LAPIS_ORE = register("lapis_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F), UniformInt.of(2, 5)));
    public static readonly Voxel DEEPSLATE_LAPIS_ORE = register("deepslate_lapis_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(LAPIS_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE), UniformInt.of(2, 5)));
    public static readonly Voxel LAPIS_BLOCK = register("lapis_block", new Voxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.LAPIS).requiresCorrectToolForDrops().strength(3.0F, 3.0F)));
    public static readonly Voxel DISPENSER = register("dispenser", new DispenserVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.5F)));
    public static readonly Voxel SANDSTONE = register("sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel CHISELED_SANDSTONE = register("chiseled_sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel CUT_SANDSTONE = register("cut_sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel NOTE_BLOCK = register("note_block", new NoteVoxel(VoxelBehaviour.Properties.of(Material.WOOD).sound(SoundType.WOOD).strength(0.8F)));
    public static readonly Voxel WHITE_BED = register("white_bed", bed(DyeColor.WHITE));
    public static readonly Voxel ORANGE_BED = register("orange_bed", bed(DyeColor.ORANGE));
    public static readonly Voxel MAGENTA_BED = register("magenta_bed", bed(DyeColor.MAGENTA));
    public static readonly Voxel LIGHT_BLUE_BED = register("light_blue_bed", bed(DyeColor.LIGHT_BLUE));
    public static readonly Voxel YELLOW_BED = register("yellow_bed", bed(DyeColor.YELLOW));
    public static readonly Voxel LIME_BED = register("lime_bed", bed(DyeColor.LIME));
    public static readonly Voxel PINK_BED = register("pink_bed", bed(DyeColor.PINK));
    public static readonly Voxel GRAY_BED = register("gray_bed", bed(DyeColor.GRAY));
    public static readonly Voxel LIGHT_GRAY_BED = register("light_gray_bed", bed(DyeColor.LIGHT_GRAY));
    public static readonly Voxel CYAN_BED = register("cyan_bed", bed(DyeColor.CYAN));
    public static readonly Voxel PURPLE_BED = register("purple_bed", bed(DyeColor.PURPLE));
    public static readonly Voxel BLUE_BED = register("blue_bed", bed(DyeColor.BLUE));
    public static readonly Voxel BROWN_BED = register("brown_bed", bed(DyeColor.BROWN));
    public static readonly Voxel GREEN_BED = register("green_bed", bed(DyeColor.GREEN));
    public static readonly Voxel RED_BED = register("red_bed", bed(DyeColor.RED));
    public static readonly Voxel BLACK_BED = register("black_bed", bed(DyeColor.BLACK));
    public static readonly Voxel POWERED_RAIL = register("powered_rail", new PoweredRailVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().strength(0.7F).sound(SoundType.METAL), true));
    public static readonly Voxel DETECTOR_RAIL = register("detector_rail", new DetectorRailVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().strength(0.7F).sound(SoundType.METAL)));
    public static readonly Voxel STICKY_PISTON = register("sticky_piston", pistonBase(true));
    public static readonly Voxel COBWEB = register("cobweb", new WebVoxel(VoxelBehaviour.Properties.of(Material.WEB).noCollission().requiresCorrectToolForDrops().strength(4.0F)));
    public static readonly Voxel GRASS = register("grass", new TallGrassVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XYZ)));
    public static readonly Voxel FERN = register("fern", new TallGrassVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XYZ)));
    public static readonly Voxel DEAD_BUSH = register("dead_bush", new DeadBushVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT, MaterialColor.WOOD).noCollission().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel SEAGRASS = register("seagrass", new SeagrassVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_WATER_PLANT).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel TALL_SEAGRASS = register("tall_seagrass", new TallSeagrassVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_WATER_PLANT).noCollission().instabreak().sound(SoundType.WET_GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel PISTON = register("piston", pistonBase(false));
    public static readonly Voxel PISTON_HEAD = register("piston_head", new PistonHeadVoxel(VoxelBehaviour.Properties.of(Material.PISTON).strength(1.5F).noLootTable()));
    public static readonly Voxel WHITE_WOOL = register("white_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.SNOW).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel ORANGE_WOOL = register("orange_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_ORANGE).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel MAGENTA_WOOL = register("magenta_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_MAGENTA).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel LIGHT_BLUE_WOOL = register("light_blue_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_LIGHT_BLUE).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel YELLOW_WOOL = register("yellow_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_YELLOW).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel LIME_WOOL = register("lime_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_LIGHT_GREEN).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel PINK_WOOL = register("pink_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_PINK).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel GRAY_WOOL = register("gray_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_GRAY).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel LIGHT_GRAY_WOOL = register("light_gray_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_LIGHT_GRAY).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel CYAN_WOOL = register("cyan_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_CYAN).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel PURPLE_WOOL = register("purple_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_PURPLE).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel BLUE_WOOL = register("blue_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_BLUE).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel BROWN_WOOL = register("brown_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_BROWN).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel GREEN_WOOL = register("green_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_GREEN).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel RED_WOOL = register("red_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_RED).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel BLACK_WOOL = register("black_wool", new Voxel(VoxelBehaviour.Properties.of(Material.WOOL, MaterialColor.COLOR_BLACK).strength(0.8F).sound(SoundType.WOOL)));
    public static readonly Voxel MOVING_PISTON = register("moving_piston", new MovingPistonVoxel(VoxelBehaviour.Properties.of(Material.PISTON).strength(-1.0F).dynamicShape().noLootTable().noOcclusion().isRedstoneConductor(Voxels::never).isSuffocating(Voxels::never).isViewVoxeling(Voxels::never)));
    public static readonly Voxel DANDELION = register("dandelion", new FlowerVoxel(MobEffects.SATURATION, 7, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel POPPY = register("poppy", new FlowerVoxel(MobEffects.NIGHT_VISION, 5, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel BLUE_ORCHID = register("blue_orchid", new FlowerVoxel(MobEffects.SATURATION, 7, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel ALLIUM = register("allium", new FlowerVoxel(MobEffects.FIRE_RESISTANCE, 4, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel AZURE_BLUET = register("azure_bluet", new FlowerVoxel(MobEffects.BLINDNESS, 8, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel RED_TULIP = register("red_tulip", new FlowerVoxel(MobEffects.WEAKNESS, 9, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel ORANGE_TULIP = register("orange_tulip", new FlowerVoxel(MobEffects.WEAKNESS, 9, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel WHITE_TULIP = register("white_tulip", new FlowerVoxel(MobEffects.WEAKNESS, 9, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel PINK_TULIP = register("pink_tulip", new FlowerVoxel(MobEffects.WEAKNESS, 9, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel OXEYE_DAISY = register("oxeye_daisy", new FlowerVoxel(MobEffects.REGENERATION, 8, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel CORNFLOWER = register("cornflower", new FlowerVoxel(MobEffects.JUMP, 6, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel WITHER_ROSE = register("wither_rose", new WitherRoseVoxel(MobEffects.WITHER, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel LILY_OF_THE_VALLEY = register("lily_of_the_valley", new FlowerVoxel(MobEffects.POISON, 12, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel BROWN_MUSHROOM = register("brown_mushroom", new MushroomVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_BROWN).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).lightLevel((p_50892_) => {
        return 1;
    }).hasPostProcess(Voxels::always), TreeFeatures.HUGE_BROWN_MUSHROOM));
    public static readonly Voxel RED_MUSHROOM = register("red_mushroom", new MushroomVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_RED).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).hasPostProcess(Voxels::always), TreeFeatures.HUGE_RED_MUSHROOM));
    public static readonly Voxel GOLD_BLOCK = register("gold_block", new Voxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.GOLD).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.METAL)));
    public static readonly Voxel IRON_BLOCK = register("iron_block", new Voxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.METAL).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL)));
    public static readonly Voxel BRICKS = register("bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_RED).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel TNT = register("tnt", new TntVoxel(VoxelBehaviour.Properties.of(Material.EXPLOSIVE).instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel BOOKSHELF = register("bookshelf", new Voxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(1.5F).sound(SoundType.WOOD)));
    public static readonly Voxel CHISELED_BOOKSHELF = register("chiseled_bookshelf", new ChiseledBookShelfVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(1.5F).sound(SoundType.CHISELED_BOOKSHELF).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel MOSSY_COBBLESTONE = register("mossy_cobblestone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel OBSIDIAN = register("obsidian", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(50.0F, 1200.0F)));
    public static readonly Voxel TORCH = register("torch", new TorchVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50755_) => {
        return 14;
    }).sound(SoundType.WOOD), ParticleTypes.FLAME));
    public static readonly Voxel WALL_TORCH = register("wall_torch", new WallTorchVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50886_) => {
        return 14;
    }).sound(SoundType.WOOD).dropsLike(TORCH), ParticleTypes.FLAME));
    public static readonly Voxel FIRE = register("fire", new FireVoxel(VoxelBehaviour.Properties.of(Material.FIRE, MaterialColor.FIRE).noCollission().instabreak().lightLevel((p_152607_) => {
        return 15;
    }).sound(SoundType.WOOL)));
    public static readonly Voxel SOUL_FIRE = register("soul_fire", new SoulFireVoxel(VoxelBehaviour.Properties.of(Material.FIRE, MaterialColor.COLOR_LIGHT_BLUE).noCollission().instabreak().lightLevel((p_152605_) => {
        return 10;
    }).sound(SoundType.WOOL)));
    public static readonly Voxel SPAWNER = register("spawner", new SpawnerVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(5.0F).sound(SoundType.METAL).noOcclusion()));
    public static readonly Voxel OAK_STAIRS = register("oak_stairs", new StairVoxel(OAK_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(OAK_PLANKS)));
    public static readonly Voxel CHEST = register("chest", new ChestVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD), () => {
        return VoxelEntityType.CHEST;
    }));
    public static readonly Voxel REDSTONE_WIRE = register("redstone_wire", new RedStoneWireVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak()));
    public static readonly Voxel DIAMOND_ORE = register("diamond_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F), UniformInt.of(3, 7)));
    public static readonly Voxel DEEPSLATE_DIAMOND_ORE = register("deepslate_diamond_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(DIAMOND_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE), UniformInt.of(3, 7)));
    public static readonly Voxel DIAMOND_BLOCK = register("diamond_block", new Voxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.DIAMOND).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL)));
    public static readonly Voxel CRAFTING_TABLE = register("crafting_table", new CraftingTableVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel WHEAT = register("wheat", new CropVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP)));
    public static readonly Voxel FARMLAND = register("farmland", new FarmVoxel(VoxelBehaviour.Properties.of(Material.DIRT).randomTicks().strength(0.6F).sound(SoundType.GRAVEL).isViewVoxeling(Voxels::always).isSuffocating(Voxels::always)));
    public static readonly Voxel FURNACE = register("furnace", new FurnaceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.5F).lightLevel(litVoxelEmission(13))));
    public static readonly Voxel OAK_SIGN = register("oak_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD), WoodType.OAK));
    public static readonly Voxel SPRUCE_SIGN = register("spruce_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, SPRUCE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD), WoodType.SPRUCE));
    public static readonly Voxel BIRCH_SIGN = register("birch_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).noCollission().strength(1.0F).sound(SoundType.WOOD), WoodType.BIRCH));
    public static readonly Voxel ACACIA_SIGN = register("acacia_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).noCollission().strength(1.0F).sound(SoundType.WOOD), WoodType.ACACIA));
    public static readonly Voxel JUNGLE_SIGN = register("jungle_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD), WoodType.JUNGLE));
    public static readonly Voxel DARK_OAK_SIGN = register("dark_oak_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD), WoodType.DARK_OAK));
    public static readonly Voxel MANGROVE_SIGN = register("mangrove_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD), WoodType.MANGROVE));
    public static readonly Voxel BAMBOO_SIGN = register("bamboo_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BAMBOO_PLANKS.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.BAMBOO));
    public static readonly Voxel OAK_DOOR = register("oak_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, OAK_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.WOOD).noOcclusion(), SoundEvents.WOODEN_DOOR_CLOSE, SoundEvents.WOODEN_DOOR_OPEN));
    public static readonly Voxel LADDER = register("ladder", new LadderVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).strength(0.4F).sound(SoundType.LADDER).noOcclusion()));
    public static readonly Voxel RAIL = register("rail", new RailVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().strength(0.7F).sound(SoundType.METAL)));
    public static readonly Voxel COBBLESTONE_STAIRS = register("cobblestone_stairs", new StairVoxel(COBBLESTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(COBBLESTONE)));
    public static readonly Voxel OAK_WALL_SIGN = register("oak_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(OAK_SIGN), WoodType.OAK));
    public static readonly Voxel SPRUCE_WALL_SIGN = register("spruce_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, SPRUCE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(SPRUCE_SIGN), WoodType.SPRUCE));
    public static readonly Voxel BIRCH_WALL_SIGN = register("birch_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(BIRCH_SIGN), WoodType.BIRCH));
    public static readonly Voxel ACACIA_WALL_SIGN = register("acacia_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(ACACIA_SIGN), WoodType.ACACIA));
    public static readonly Voxel JUNGLE_WALL_SIGN = register("jungle_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(JUNGLE_SIGN), WoodType.JUNGLE));
    public static readonly Voxel DARK_OAK_WALL_SIGN = register("dark_oak_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(DARK_OAK_SIGN), WoodType.DARK_OAK));
    public static readonly Voxel MANGROVE_WALL_SIGN = register("mangrove_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(MANGROVE_SIGN), WoodType.MANGROVE));
    public static readonly Voxel BAMBOO_WALL_SIGN = register("bamboo_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BAMBOO_PLANKS.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20).dropsLike(BAMBOO_SIGN), WoodType.BAMBOO));
    public static readonly Voxel OAK_HANGING_SIGN = register("oak_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, OAK_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.OAK));
    public static readonly Voxel SPRUCE_HANGING_SIGN = register("spruce_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, SPRUCE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.SPRUCE));
    public static readonly Voxel BIRCH_HANGING_SIGN = register("birch_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.BIRCH));
    public static readonly Voxel ACACIA_HANGING_SIGN = register("acacia_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.ACACIA));
    public static readonly Voxel JUNGLE_HANGING_SIGN = register("jungle_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.JUNGLE));
    public static readonly Voxel DARK_OAK_HANGING_SIGN = register("dark_oak_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.DARK_OAK));
    public static readonly Voxel CRIMSON_HANGING_SIGN = register("crimson_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.CRIMSON_STEM).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.CRIMSON));
    public static readonly Voxel WARPED_HANGING_SIGN = register("warped_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.WARPED_STEM).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.WARPED));
    public static readonly Voxel MANGROVE_HANGING_SIGN = register("mangrove_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.MANGROVE));
    public static readonly Voxel BAMBOO_HANGING_SIGN = register("bamboo_hanging_sign", new CeilingHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).noCollission().strength(1.0F).sound(SoundType.BAMBOO_WOOD_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.BAMBOO));
    public static readonly Voxel OAK_WALL_HANGING_SIGN = register("oak_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, OAK_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20).dropsLike(OAK_HANGING_SIGN), WoodType.OAK));
    public static readonly Voxel SPRUCE_WALL_HANGING_SIGN = register("spruce_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).dropsLike(SPRUCE_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.SPRUCE));
    public static readonly Voxel BIRCH_WALL_HANGING_SIGN = register("birch_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.SAND).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).dropsLike(BIRCH_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.BIRCH));
    public static readonly Voxel ACACIA_WALL_HANGING_SIGN = register("acacia_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).dropsLike(ACACIA_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.ACACIA));
    public static readonly Voxel JUNGLE_WALL_HANGING_SIGN = register("jungle_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).dropsLike(JUNGLE_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.JUNGLE));
    public static readonly Voxel DARK_OAK_WALL_HANGING_SIGN = register("dark_oak_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).dropsLike(DARK_OAK_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.DARK_OAK));
    public static readonly Voxel MANGROVE_WALL_HANGING_SIGN = register("mangrove_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_LOG.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.HANGING_SIGN).dropsLike(MANGROVE_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.MANGROVE));
    public static readonly Voxel CRIMSON_WALL_HANGING_SIGN = register("crimson_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.CRIMSON_STEM).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD_HANGING_SIGN).dropsLike(CRIMSON_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.CRIMSON));
    public static readonly Voxel WARPED_WALL_HANGING_SIGN = register("warped_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.WARPED_STEM).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD_HANGING_SIGN).dropsLike(WARPED_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.WARPED));
    public static readonly Voxel BAMBOO_WALL_HANGING_SIGN = register("bamboo_wall_hanging_sign", new WallHangingSignVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).noCollission().strength(1.0F).sound(SoundType.BAMBOO_WOOD_HANGING_SIGN).dropsLike(BAMBOO_HANGING_SIGN).requiredFeatures(FeatureFlags.UPDATE_1_20), WoodType.BAMBOO));
    public static readonly Voxel LEVER = register("lever", new LeverVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().strength(0.5F).sound(SoundType.WOOD)));
    public static readonly Voxel STONE_PRESSURE_PLATE = register("stone_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.MOBS, VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().noCollission().strength(0.5F), SoundEvents.STONE_PRESSURE_PLATE_CLICK_OFF, SoundEvents.STONE_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel IRON_DOOR = register("iron_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.METAL).requiresCorrectToolForDrops().strength(5.0F).sound(SoundType.METAL).noOcclusion(), SoundEvents.IRON_DOOR_CLOSE, SoundEvents.IRON_DOOR_OPEN));
    public static readonly Voxel OAK_PRESSURE_PLATE = register("oak_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, OAK_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD), SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel SPRUCE_PRESSURE_PLATE = register("spruce_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, SPRUCE_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD), SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel BIRCH_PRESSURE_PLATE = register("birch_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, BIRCH_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD), SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel JUNGLE_PRESSURE_PLATE = register("jungle_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD), SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel ACACIA_PRESSURE_PLATE = register("acacia_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, ACACIA_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD), SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel DARK_OAK_PRESSURE_PLATE = register("dark_oak_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD), SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel MANGROVE_PRESSURE_PLATE = register("mangrove_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD), SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel BAMBOO_PRESSURE_PLATE = register("bamboo_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.WOOD, BAMBOO_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20), SoundEvents.BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF, SoundEvents.BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel REDSTONE_ORE = register("redstone_ore", new RedStoneOreVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().randomTicks().lightLevel(litVoxelEmission(9)).strength(3.0F, 3.0F)));
    public static readonly Voxel DEEPSLATE_REDSTONE_ORE = register("deepslate_redstone_ore", new RedStoneOreVoxel(VoxelBehaviour.Properties.copy(REDSTONE_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
    public static readonly Voxel REDSTONE_TORCH = register("redstone_torch", new RedstoneTorchVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel(litVoxelEmission(7)).sound(SoundType.WOOD)));
    public static readonly Voxel REDSTONE_WALL_TORCH = register("redstone_wall_torch", new RedstoneWallTorchVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel(litVoxelEmission(7)).sound(SoundType.WOOD).dropsLike(REDSTONE_TORCH)));
    public static readonly Voxel STONE_BUTTON = register("stone_button", stoneButton());
    public static readonly Voxel SNOW = register("snow", new SnowLayerVoxel(VoxelBehaviour.Properties.of(Material.TOP_SNOW).randomTicks().strength(0.1F).requiresCorrectToolForDrops().sound(SoundType.SNOW).isViewVoxeling((p_187417_, p_187418_, p_187419_) => {
        return p_187417_.getValue(SnowLayerVoxel.LAYERS) >= 8;
    })));
    public static readonly Voxel ICE = register("ice", new IceVoxel(VoxelBehaviour.Properties.of(Material.ICE).friction(0.98F).randomTicks().strength(0.5F).sound(SoundType.GLASS).noOcclusion().isValidSpawn((p_187426_, p_187427_, p_187428_, p_187429_) => {
        return p_187429_ == EntityType.POLAR_BEAR;
    })));
    public static readonly Voxel SNOW_BLOCK = register("snow_block", new Voxel(VoxelBehaviour.Properties.of(Material.SNOW).requiresCorrectToolForDrops().strength(0.2F).sound(SoundType.SNOW)));
    public static readonly Voxel CACTUS = register("cactus", new CactusVoxel(VoxelBehaviour.Properties.of(Material.CACTUS).randomTicks().strength(0.4F).sound(SoundType.WOOL)));
    public static readonly Voxel CLAY = register("clay", new Voxel(VoxelBehaviour.Properties.of(Material.CLAY).strength(0.6F).sound(SoundType.GRAVEL)));
    public static readonly Voxel SUGAR_CANE = register("sugar_cane", new SugarCaneVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)));
    public static readonly Voxel JUKEBOX = register("jukebox", new JukeboxVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 6.0F)));
    public static readonly Voxel OAK_FENCE = register("oak_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, OAK_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel PUMPKIN = register("pumpkin", new PumpkinVoxel(VoxelBehaviour.Properties.of(Material.VEGETABLE, MaterialColor.COLOR_ORANGE).strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel NETHERRACK = register("netherrack", new NetherrackVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(0.4F).sound(SoundType.NETHERRACK)));
    public static readonly Voxel SOUL_SAND = register("soul_sand", new SoulSandVoxel(VoxelBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_BROWN).strength(0.5F).speedFactor(0.4F).sound(SoundType.SOUL_SAND).isValidSpawn(Voxels::always).isRedstoneConductor(Voxels::always).isViewVoxeling(Voxels::always).isSuffocating(Voxels::always)));
    public static readonly Voxel SOUL_SOIL = register("soul_soil", new Voxel(VoxelBehaviour.Properties.of(Material.DIRT, MaterialColor.COLOR_BROWN).strength(0.5F).sound(SoundType.SOUL_SOIL)));
    public static readonly Voxel BASALT = register("basalt", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(1.25F, 4.2F).sound(SoundType.BASALT)));
    public static readonly Voxel POLISHED_BASALT = register("polished_basalt", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(1.25F, 4.2F).sound(SoundType.BASALT)));
    public static readonly Voxel SOUL_TORCH = register("soul_torch", new TorchVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50884_) => {
        return 10;
    }).sound(SoundType.WOOD), ParticleTypes.SOUL_FIRE_FLAME));
    public static readonly Voxel SOUL_WALL_TORCH = register("soul_wall_torch", new WallTorchVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().instabreak().lightLevel((p_50876_) => {
        return 10;
    }).sound(SoundType.WOOD).dropsLike(SOUL_TORCH), ParticleTypes.SOUL_FIRE_FLAME));
    public static readonly Voxel GLOWSTONE = register("glowstone", new Voxel(VoxelBehaviour.Properties.of(Material.GLASS, MaterialColor.SAND).strength(0.3F).sound(SoundType.GLASS).lightLevel((p_50874_) => {
        return 15;
    })));
    public static readonly Voxel NETHER_PORTAL = register("nether_portal", new NetherPortalVoxel(VoxelBehaviour.Properties.of(Material.PORTAL).noCollission().randomTicks().strength(-1.0F).sound(SoundType.GLASS).lightLevel((p_50872_) => {
        return 11;
    })));
    public static readonly Voxel CARVED_PUMPKIN = register("carved_pumpkin", new CarvedPumpkinVoxel(VoxelBehaviour.Properties.of(Material.VEGETABLE, MaterialColor.COLOR_ORANGE).strength(1.0F).sound(SoundType.WOOD).isValidSpawn(Voxels::always)));
    public static readonly Voxel JACK_O_LANTERN = register("jack_o_lantern", new CarvedPumpkinVoxel(VoxelBehaviour.Properties.of(Material.VEGETABLE, MaterialColor.COLOR_ORANGE).strength(1.0F).sound(SoundType.WOOD).lightLevel((p_50870_) => {
        return 15;
    }).isValidSpawn(Voxels::always)));
    public static readonly Voxel CAKE = register("cake", new CakeVoxel(VoxelBehaviour.Properties.of(Material.CAKE).strength(0.5F).sound(SoundType.WOOL)));
    public static readonly Voxel REPEATER = register("repeater", new RepeaterVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().sound(SoundType.WOOD)));
    public static readonly Voxel WHITE_STAINED_GLASS = register("white_stained_glass", stainedGlass(DyeColor.WHITE));
    public static readonly Voxel ORANGE_STAINED_GLASS = register("orange_stained_glass", stainedGlass(DyeColor.ORANGE));
    public static readonly Voxel MAGENTA_STAINED_GLASS = register("magenta_stained_glass", stainedGlass(DyeColor.MAGENTA));
    public static readonly Voxel LIGHT_BLUE_STAINED_GLASS = register("light_blue_stained_glass", stainedGlass(DyeColor.LIGHT_BLUE));
    public static readonly Voxel YELLOW_STAINED_GLASS = register("yellow_stained_glass", stainedGlass(DyeColor.YELLOW));
    public static readonly Voxel LIME_STAINED_GLASS = register("lime_stained_glass", stainedGlass(DyeColor.LIME));
    public static readonly Voxel PINK_STAINED_GLASS = register("pink_stained_glass", stainedGlass(DyeColor.PINK));
    public static readonly Voxel GRAY_STAINED_GLASS = register("gray_stained_glass", stainedGlass(DyeColor.GRAY));
    public static readonly Voxel LIGHT_GRAY_STAINED_GLASS = register("light_gray_stained_glass", stainedGlass(DyeColor.LIGHT_GRAY));
    public static readonly Voxel CYAN_STAINED_GLASS = register("cyan_stained_glass", stainedGlass(DyeColor.CYAN));
    public static readonly Voxel PURPLE_STAINED_GLASS = register("purple_stained_glass", stainedGlass(DyeColor.PURPLE));
    public static readonly Voxel BLUE_STAINED_GLASS = register("blue_stained_glass", stainedGlass(DyeColor.BLUE));
    public static readonly Voxel BROWN_STAINED_GLASS = register("brown_stained_glass", stainedGlass(DyeColor.BROWN));
    public static readonly Voxel GREEN_STAINED_GLASS = register("green_stained_glass", stainedGlass(DyeColor.GREEN));
    public static readonly Voxel RED_STAINED_GLASS = register("red_stained_glass", stainedGlass(DyeColor.RED));
    public static readonly Voxel BLACK_STAINED_GLASS = register("black_stained_glass", stainedGlass(DyeColor.BLACK));
    public static readonly Voxel OAK_TRAPDOOR = register("oak_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(3.0F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundEvents.WOODEN_TRAPDOOR_OPEN));
    public static readonly Voxel SPRUCE_TRAPDOOR = register("spruce_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(3.0F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundEvents.WOODEN_TRAPDOOR_OPEN));
    public static readonly Voxel BIRCH_TRAPDOOR = register("birch_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(3.0F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundEvents.WOODEN_TRAPDOOR_OPEN));
    public static readonly Voxel JUNGLE_TRAPDOOR = register("jungle_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(3.0F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundEvents.WOODEN_TRAPDOOR_OPEN));
    public static readonly Voxel ACACIA_TRAPDOOR = register("acacia_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(3.0F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundEvents.WOODEN_TRAPDOOR_OPEN));
    public static readonly Voxel DARK_OAK_TRAPDOOR = register("dark_oak_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(3.0F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundEvents.WOODEN_TRAPDOOR_OPEN));
    public static readonly Voxel MANGROVE_TRAPDOOR = register("mangrove_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).strength(3.0F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundEvents.WOODEN_TRAPDOOR_OPEN));
    public static readonly Voxel BAMBOO_TRAPDOOR = register("bamboo_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).strength(3.0F).sound(SoundType.BAMBOO_WOOD).noOcclusion().isValidSpawn(Voxels::never).requiredFeatures(FeatureFlags.UPDATE_1_20), SoundEvents.BAMBOO_WOOD_TRAPDOOR_CLOSE, SoundEvents.BAMBOO_WOOD_TRAPDOOR_OPEN));
    public static readonly Voxel STONE_BRICKS = register("stone_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel MOSSY_STONE_BRICKS = register("mossy_stone_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel CRACKED_STONE_BRICKS = register("cracked_stone_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel CHISELED_STONE_BRICKS = register("chiseled_stone_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel PACKED_MUD = register("packed_mud", new Voxel(VoxelBehaviour.Properties.copy(DIRT).strength(1.0F, 3.0F).sound(SoundType.PACKED_MUD)));
    public static readonly Voxel MUD_BRICKS = register("mud_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).requiresCorrectToolForDrops().strength(1.5F, 3.0F).sound(SoundType.MUD_BRICKS)));
    public static readonly Voxel INFESTED_STONE = register("infested_stone", new InfestedVoxel(STONE, VoxelBehaviour.Properties.of(Material.CLAY)));
    public static readonly Voxel INFESTED_COBBLESTONE = register("infested_cobblestone", new InfestedVoxel(COBBLESTONE, VoxelBehaviour.Properties.of(Material.CLAY)));
    public static readonly Voxel INFESTED_STONE_BRICKS = register("infested_stone_bricks", new InfestedVoxel(STONE_BRICKS, VoxelBehaviour.Properties.of(Material.CLAY)));
    public static readonly Voxel INFESTED_MOSSY_STONE_BRICKS = register("infested_mossy_stone_bricks", new InfestedVoxel(MOSSY_STONE_BRICKS, VoxelBehaviour.Properties.of(Material.CLAY)));
    public static readonly Voxel INFESTED_CRACKED_STONE_BRICKS = register("infested_cracked_stone_bricks", new InfestedVoxel(CRACKED_STONE_BRICKS, VoxelBehaviour.Properties.of(Material.CLAY)));
    public static readonly Voxel INFESTED_CHISELED_STONE_BRICKS = register("infested_chiseled_stone_bricks", new InfestedVoxel(CHISELED_STONE_BRICKS, VoxelBehaviour.Properties.of(Material.CLAY)));
    public static readonly Voxel BROWN_MUSHROOM_BLOCK = register("brown_mushroom_block", new HugeMushroomVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(0.2F).sound(SoundType.WOOD)));
    public static readonly Voxel RED_MUSHROOM_BLOCK = register("red_mushroom_block", new HugeMushroomVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).strength(0.2F).sound(SoundType.WOOD)));
    public static readonly Voxel MUSHROOM_STEM = register("mushroom_stem", new HugeMushroomVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOL).strength(0.2F).sound(SoundType.WOOD)));
    public static readonly Voxel IRON_BARS = register("iron_bars", new IronBarsVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.NONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).noOcclusion()));
    public static readonly Voxel CHAIN = register("chain", new ChainVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.NONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.CHAIN).noOcclusion()));
    public static readonly Voxel GLASS_PANE = register("glass_pane", new IronBarsVoxel(VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel MELON = register("melon", new MelonVoxel(VoxelBehaviour.Properties.of(Material.VEGETABLE, MaterialColor.COLOR_LIGHT_GREEN).strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel ATTACHED_PUMPKIN_STEM = register("attached_pumpkin_stem", new AttachedStemVoxel((StemGrownVoxel)PUMPKIN, () => {
        return Items.PUMPKIN_SEEDS;
    }, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.WOOD)));
    public static readonly Voxel ATTACHED_MELON_STEM = register("attached_melon_stem", new AttachedStemVoxel((StemGrownVoxel)MELON, () => {
        return Items.MELON_SEEDS;
    }, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.WOOD)));
    public static readonly Voxel PUMPKIN_STEM = register("pumpkin_stem", new StemVoxel((StemGrownVoxel)PUMPKIN, () => {
        return Items.PUMPKIN_SEEDS;
    }, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.HARD_CROP)));
    public static readonly Voxel MELON_STEM = register("melon_stem", new StemVoxel((StemGrownVoxel)MELON, () => {
        return Items.MELON_SEEDS;
    }, VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.HARD_CROP)));
    public static readonly Voxel VINE = register("vine", new VineVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().randomTicks().strength(0.2F).sound(SoundType.VINE)));
    public static readonly Voxel GLOW_LICHEN = register("glow_lichen", new GlowLichenVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT, MaterialColor.GLOW_LICHEN).noCollission().strength(0.2F).sound(SoundType.GLOW_LICHEN).lightLevel(GlowLichenVoxel.emission(7))));
    public static readonly Voxel OAK_FENCE_GATE = register("oak_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, OAK_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static readonly Voxel BRICK_STAIRS = register("brick_stairs", new StairVoxel(BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(BRICKS)));
    public static readonly Voxel STONE_BRICK_STAIRS = register("stone_brick_stairs", new StairVoxel(STONE_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(STONE_BRICKS)));
    public static readonly Voxel MUD_BRICK_STAIRS = register("mud_brick_stairs", new StairVoxel(MUD_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(MUD_BRICKS)));
    public static readonly Voxel MYCELIUM = register("mycelium", new MyceliumVoxel(VoxelBehaviour.Properties.of(Material.GRASS, MaterialColor.COLOR_PURPLE).randomTicks().strength(0.6F).sound(SoundType.GRASS)));
    public static readonly Voxel LILY_PAD = register("lily_pad", new WaterlilyVoxel(VoxelBehaviour.Properties.of(Material.PLANT).instabreak().sound(SoundType.LILY_PAD).noOcclusion()));
    public static readonly Voxel NETHER_BRICKS = register("nether_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(2.0F, 6.0F).sound(SoundType.NETHER_BRICKS)));
    public static readonly Voxel NETHER_BRICK_FENCE = register("nether_brick_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(2.0F, 6.0F).sound(SoundType.NETHER_BRICKS)));
    public static readonly Voxel NETHER_BRICK_STAIRS = register("nether_brick_stairs", new StairVoxel(NETHER_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(NETHER_BRICKS)));
    public static readonly Voxel NETHER_WART = register("nether_wart", new NetherWartVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_RED).noCollission().randomTicks().sound(SoundType.NETHER_WART)));
    public static readonly Voxel ENCHANTING_TABLE = register("enchanting_table", new EnchantmentTableVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_RED).requiresCorrectToolForDrops().lightLevel((p_187437_) => {
        return 7;
    }).strength(5.0F, 1200.0F)));
    public static readonly Voxel BREWING_STAND = register("brewing_stand", new BrewingStandVoxel(VoxelBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().strength(0.5F).lightLevel((p_50856_) => {
        return 1;
    }).noOcclusion()));
    public static readonly Voxel CAULDRON = register("cauldron", new CauldronVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.STONE).requiresCorrectToolForDrops().strength(2.0F).noOcclusion()));
    public static readonly Voxel WATER_CAULDRON = register("water_cauldron", new LayeredCauldronVoxel(VoxelBehaviour.Properties.copy(CAULDRON), LayeredCauldronVoxel.RAIN, CauldronInteraction.WATER));
    public static readonly Voxel LAVA_CAULDRON = register("lava_cauldron", new LavaCauldronVoxel(VoxelBehaviour.Properties.copy(CAULDRON).lightLevel((p_152692_) => {
        return 15;
    })));
    public static readonly Voxel POWDER_SNOW_CAULDRON = register("powder_snow_cauldron", new PowderSnowCauldronVoxel(VoxelBehaviour.Properties.copy(CAULDRON), LayeredCauldronVoxel.SNOW, CauldronInteraction.POWDER_SNOW));
    public static readonly Voxel END_PORTAL = register("end_portal", new EndPortalVoxel(VoxelBehaviour.Properties.of(Material.PORTAL, MaterialColor.COLOR_BLACK).noCollission().lightLevel((p_152690_) => {
        return 15;
    }).strength(-1.0F, 3600000.0F).noLootTable()));
    public static readonly Voxel END_PORTAL_FRAME = register("end_portal_frame", new EndPortalFrameVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).sound(SoundType.GLASS).lightLevel((p_50847_) => {
        return 1;
    }).strength(-1.0F, 3600000.0F).noLootTable()));
    public static readonly Voxel END_STONE = register("end_stone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(3.0F, 9.0F)));
    public static readonly Voxel DRAGON_EGG = register("dragon_egg", new DragonEggVoxel(VoxelBehaviour.Properties.of(Material.EGG, MaterialColor.COLOR_BLACK).strength(3.0F, 9.0F).lightLevel((p_50840_) => {
        return 1;
    }).noOcclusion()));
    public static readonly Voxel REDSTONE_LAMP = register("redstone_lamp", new RedstoneLampVoxel(VoxelBehaviour.Properties.of(Material.BUILDABLE_GLASS).lightLevel(litVoxelEmission(15)).strength(0.3F).sound(SoundType.GLASS).isValidSpawn(Voxels::always)));
    public static readonly Voxel COCOA = register("cocoa", new CocoaVoxel(VoxelBehaviour.Properties.of(Material.PLANT).randomTicks().strength(0.2F, 3.0F).sound(SoundType.WOOD).noOcclusion()));
    public static readonly Voxel SANDSTONE_STAIRS = register("sandstone_stairs", new StairVoxel(SANDSTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(SANDSTONE)));
    public static readonly Voxel EMERALD_ORE = register("emerald_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F), UniformInt.of(3, 7)));
    public static readonly Voxel DEEPSLATE_EMERALD_ORE = register("deepslate_emerald_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(EMERALD_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE), UniformInt.of(3, 7)));
    public static readonly Voxel ENDER_CHEST = register("ender_chest", new EnderChestVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(22.5F, 600.0F).lightLevel((p_50854_) => {
        return 7;
    })));
    public static readonly Voxel TRIPWIRE_HOOK = register("tripwire_hook", new TripWireHookVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission()));
    public static readonly Voxel TRIPWIRE = register("tripwire", new TripWireVoxel((TripWireHookVoxel)TRIPWIRE_HOOK, VoxelBehaviour.Properties.of(Material.DECORATION).noCollission()));
    public static readonly Voxel EMERALD_BLOCK = register("emerald_block", new Voxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.EMERALD).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL)));
    public static readonly Voxel SPRUCE_STAIRS = register("spruce_stairs", new StairVoxel(SPRUCE_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(SPRUCE_PLANKS)));
    public static readonly Voxel BIRCH_STAIRS = register("birch_stairs", new StairVoxel(BIRCH_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(BIRCH_PLANKS)));
    public static readonly Voxel JUNGLE_STAIRS = register("jungle_stairs", new StairVoxel(JUNGLE_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(JUNGLE_PLANKS)));
    public static readonly Voxel COMMAND_BLOCK = register("command_block", new CommandVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_BROWN).requiresCorrectToolForDrops().strength(-1.0F, 3600000.0F).noLootTable(), false));
    public static readonly Voxel BEACON = register("beacon", new BeaconVoxel(VoxelBehaviour.Properties.of(Material.GLASS, MaterialColor.DIAMOND).strength(3.0F).lightLevel((p_50828_) => {
        return 15;
    }).noOcclusion().isRedstoneConductor(Voxels::never)));
    public static readonly Voxel COBBLESTONE_WALL = register("cobblestone_wall", new WallVoxel(VoxelBehaviour.Properties.copy(COBBLESTONE)));
    public static readonly Voxel MOSSY_COBBLESTONE_WALL = register("mossy_cobblestone_wall", new WallVoxel(VoxelBehaviour.Properties.copy(COBBLESTONE)));
    public static readonly Voxel FLOWER_POT = register("flower_pot", new FlowerPotVoxel(AIR, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_OAK_SAPLING = register("potted_oak_sapling", new FlowerPotVoxel(OAK_SAPLING, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_SPRUCE_SAPLING = register("potted_spruce_sapling", new FlowerPotVoxel(SPRUCE_SAPLING, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_BIRCH_SAPLING = register("potted_birch_sapling", new FlowerPotVoxel(BIRCH_SAPLING, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_JUNGLE_SAPLING = register("potted_jungle_sapling", new FlowerPotVoxel(JUNGLE_SAPLING, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_ACACIA_SAPLING = register("potted_acacia_sapling", new FlowerPotVoxel(ACACIA_SAPLING, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_DARK_OAK_SAPLING = register("potted_dark_oak_sapling", new FlowerPotVoxel(DARK_OAK_SAPLING, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_MANGROVE_PROPAGULE = register("potted_mangrove_propagule", new FlowerPotVoxel(MANGROVE_PROPAGULE, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_FERN = register("potted_fern", new FlowerPotVoxel(FERN, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_DANDELION = register("potted_dandelion", new FlowerPotVoxel(DANDELION, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_POPPY = register("potted_poppy", new FlowerPotVoxel(POPPY, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_BLUE_ORCHID = register("potted_blue_orchid", new FlowerPotVoxel(BLUE_ORCHID, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_ALLIUM = register("potted_allium", new FlowerPotVoxel(ALLIUM, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_AZURE_BLUET = register("potted_azure_bluet", new FlowerPotVoxel(AZURE_BLUET, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_RED_TULIP = register("potted_red_tulip", new FlowerPotVoxel(RED_TULIP, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_ORANGE_TULIP = register("potted_orange_tulip", new FlowerPotVoxel(ORANGE_TULIP, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_WHITE_TULIP = register("potted_white_tulip", new FlowerPotVoxel(WHITE_TULIP, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_PINK_TULIP = register("potted_pink_tulip", new FlowerPotVoxel(PINK_TULIP, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_OXEYE_DAISY = register("potted_oxeye_daisy", new FlowerPotVoxel(OXEYE_DAISY, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_CORNFLOWER = register("potted_cornflower", new FlowerPotVoxel(CORNFLOWER, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_LILY_OF_THE_VALLEY = register("potted_lily_of_the_valley", new FlowerPotVoxel(LILY_OF_THE_VALLEY, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_WITHER_ROSE = register("potted_wither_rose", new FlowerPotVoxel(WITHER_ROSE, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_RED_MUSHROOM = register("potted_red_mushroom", new FlowerPotVoxel(RED_MUSHROOM, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_BROWN_MUSHROOM = register("potted_brown_mushroom", new FlowerPotVoxel(BROWN_MUSHROOM, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_DEAD_BUSH = register("potted_dead_bush", new FlowerPotVoxel(DEAD_BUSH, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_CACTUS = register("potted_cactus", new FlowerPotVoxel(CACTUS, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel CARROTS = register("carrots", new CarrotVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP)));
    public static readonly Voxel POTATOES = register("potatoes", new PotatoVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP)));
    public static readonly Voxel OAK_BUTTON = register("oak_button", woodenButton());
    public static readonly Voxel SPRUCE_BUTTON = register("spruce_button", woodenButton());
    public static readonly Voxel BIRCH_BUTTON = register("birch_button", woodenButton());
    public static readonly Voxel JUNGLE_BUTTON = register("jungle_button", woodenButton());
    public static readonly Voxel ACACIA_BUTTON = register("acacia_button", woodenButton());
    public static readonly Voxel DARK_OAK_BUTTON = register("dark_oak_button", woodenButton());
    public static readonly Voxel MANGROVE_BUTTON = register("mangrove_button", woodenButton());
    public static readonly Voxel BAMBOO_BUTTON = register("bamboo_button", new ButtonVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().strength(0.5F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20), 30, true, SoundEvents.BAMBOO_WOOD_BUTTON_CLICK_OFF, SoundEvents.BAMBOO_WOOD_BUTTON_CLICK_ON));
    public static readonly Voxel SKELETON_SKULL = register("skeleton_skull", new SkullVoxel(SkullVoxel.Types.SKELETON, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F)));
    public static readonly Voxel SKELETON_WALL_SKULL = register("skeleton_wall_skull", new WallSkullVoxel(SkullVoxel.Types.SKELETON, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).dropsLike(SKELETON_SKULL)));
    public static readonly Voxel WITHER_SKELETON_SKULL = register("wither_skeleton_skull", new WitherSkullVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F)));
    public static readonly Voxel WITHER_SKELETON_WALL_SKULL = register("wither_skeleton_wall_skull", new WitherWallSkullVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).dropsLike(WITHER_SKELETON_SKULL)));
    public static readonly Voxel ZOMBIE_HEAD = register("zombie_head", new SkullVoxel(SkullVoxel.Types.ZOMBIE, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F)));
    public static readonly Voxel ZOMBIE_WALL_HEAD = register("zombie_wall_head", new WallSkullVoxel(SkullVoxel.Types.ZOMBIE, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).dropsLike(ZOMBIE_HEAD)));
    public static readonly Voxel PLAYER_HEAD = register("player_head", new PlayerHeadVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F)));
    public static readonly Voxel PLAYER_WALL_HEAD = register("player_wall_head", new PlayerWallHeadVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).dropsLike(PLAYER_HEAD)));
    public static readonly Voxel CREEPER_HEAD = register("creeper_head", new SkullVoxel(SkullVoxel.Types.CREEPER, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F)));
    public static readonly Voxel CREEPER_WALL_HEAD = register("creeper_wall_head", new WallSkullVoxel(SkullVoxel.Types.CREEPER, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).dropsLike(CREEPER_HEAD)));
    public static readonly Voxel DRAGON_HEAD = register("dragon_head", new SkullVoxel(SkullVoxel.Types.DRAGON, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F)));
    public static readonly Voxel DRAGON_WALL_HEAD = register("dragon_wall_head", new WallSkullVoxel(SkullVoxel.Types.DRAGON, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).dropsLike(DRAGON_HEAD)));
    public static readonly Voxel PIGLIN_HEAD = register("piglin_head", new SkullVoxel(SkullVoxel.Types.PIGLIN, VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel PIGLIN_WALL_HEAD = register("piglin_wall_head", new PiglinWallSkullVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).strength(1.0F).dropsLike(PIGLIN_HEAD).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel ANVIL = register("anvil", new AnvilVoxel(VoxelBehaviour.Properties.of(Material.HEAVY_METAL, MaterialColor.METAL).requiresCorrectToolForDrops().strength(5.0F, 1200.0F).sound(SoundType.ANVIL)));
    public static readonly Voxel CHIPPED_ANVIL = register("chipped_anvil", new AnvilVoxel(VoxelBehaviour.Properties.of(Material.HEAVY_METAL, MaterialColor.METAL).requiresCorrectToolForDrops().strength(5.0F, 1200.0F).sound(SoundType.ANVIL)));
    public static readonly Voxel DAMAGED_ANVIL = register("damaged_anvil", new AnvilVoxel(VoxelBehaviour.Properties.of(Material.HEAVY_METAL, MaterialColor.METAL).requiresCorrectToolForDrops().strength(5.0F, 1200.0F).sound(SoundType.ANVIL)));
    public static readonly Voxel TRAPPED_CHEST = register("trapped_chest", new TrappedChestVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel LIGHT_WEIGHTED_PRESSURE_PLATE = register("light_weighted_pressure_plate", new WeightedPressurePlateVoxel(15, VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.GOLD).requiresCorrectToolForDrops().noCollission().strength(0.5F).sound(SoundType.METAL), SoundEvents.METAL_PRESSURE_PLATE_CLICK_OFF, SoundEvents.METAL_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel HEAVY_WEIGHTED_PRESSURE_PLATE = register("heavy_weighted_pressure_plate", new WeightedPressurePlateVoxel(150, VoxelBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().noCollission().strength(0.5F).sound(SoundType.METAL), SoundEvents.METAL_PRESSURE_PLATE_CLICK_OFF, SoundEvents.METAL_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel COMPARATOR = register("comparator", new ComparatorVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().sound(SoundType.WOOD)));
    public static readonly Voxel DAYLIGHT_DETECTOR = register("daylight_detector", new DaylightDetectorVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(0.2F).sound(SoundType.WOOD)));
    public static readonly Voxel REDSTONE_BLOCK = register("redstone_block", new PoweredVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.FIRE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).isRedstoneConductor(Voxels::never)));
    public static readonly Voxel NETHER_QUARTZ_ORE = register("nether_quartz_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(3.0F, 3.0F).sound(SoundType.NETHER_ORE), UniformInt.of(2, 5)));
    public static readonly Voxel HOPPER = register("hopper", new HopperVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.STONE).requiresCorrectToolForDrops().strength(3.0F, 4.8F).sound(SoundType.METAL).noOcclusion()));
    public static readonly Voxel QUARTZ_BLOCK = register("quartz_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel CHISELED_QUARTZ_BLOCK = register("chiseled_quartz_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel QUARTZ_PILLAR = register("quartz_pillar", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel QUARTZ_STAIRS = register("quartz_stairs", new StairVoxel(QUARTZ_BLOCK.defaultVoxelState(), VoxelBehaviour.Properties.copy(QUARTZ_BLOCK)));
    public static readonly Voxel ACTIVATOR_RAIL = register("activator_rail", new PoweredRailVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).noCollission().strength(0.7F).sound(SoundType.METAL)));
    public static readonly Voxel DROPPER = register("dropper", new DropperVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.5F)));
    public static readonly Voxel WHITE_TERRACOTTA = register("white_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_WHITE).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel ORANGE_TERRACOTTA = register("orange_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_ORANGE).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel MAGENTA_TERRACOTTA = register("magenta_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_MAGENTA).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel LIGHT_BLUE_TERRACOTTA = register("light_blue_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_BLUE).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel YELLOW_TERRACOTTA = register("yellow_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_YELLOW).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel LIME_TERRACOTTA = register("lime_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel PINK_TERRACOTTA = register("pink_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_PINK).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel GRAY_TERRACOTTA = register("gray_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_GRAY).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel LIGHT_GRAY_TERRACOTTA = register("light_gray_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel CYAN_TERRACOTTA = register("cyan_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_CYAN).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel PURPLE_TERRACOTTA = register("purple_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_PURPLE).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel BLUE_TERRACOTTA = register("blue_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_BLUE).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel BROWN_TERRACOTTA = register("brown_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_BROWN).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel GREEN_TERRACOTTA = register("green_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_GREEN).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel RED_TERRACOTTA = register("red_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_RED).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel BLACK_TERRACOTTA = register("black_terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_BLACK).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel WHITE_STAINED_GLASS_PANE = register("white_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.WHITE, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel ORANGE_STAINED_GLASS_PANE = register("orange_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.ORANGE, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel MAGENTA_STAINED_GLASS_PANE = register("magenta_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.MAGENTA, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel LIGHT_BLUE_STAINED_GLASS_PANE = register("light_blue_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.LIGHT_BLUE, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel YELLOW_STAINED_GLASS_PANE = register("yellow_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.YELLOW, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel LIME_STAINED_GLASS_PANE = register("lime_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.LIME, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel PINK_STAINED_GLASS_PANE = register("pink_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.PINK, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel GRAY_STAINED_GLASS_PANE = register("gray_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.GRAY, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel LIGHT_GRAY_STAINED_GLASS_PANE = register("light_gray_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.LIGHT_GRAY, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel CYAN_STAINED_GLASS_PANE = register("cyan_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.CYAN, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel PURPLE_STAINED_GLASS_PANE = register("purple_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.PURPLE, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel BLUE_STAINED_GLASS_PANE = register("blue_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.BLUE, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel BROWN_STAINED_GLASS_PANE = register("brown_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.BROWN, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel GREEN_STAINED_GLASS_PANE = register("green_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.GREEN, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel RED_STAINED_GLASS_PANE = register("red_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.RED, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel BLACK_STAINED_GLASS_PANE = register("black_stained_glass_pane", new StainedGlassPaneVoxel(DyeColor.BLACK, VoxelBehaviour.Properties.of(Material.GLASS).strength(0.3F).sound(SoundType.GLASS).noOcclusion()));
    public static readonly Voxel ACACIA_STAIRS = register("acacia_stairs", new StairVoxel(ACACIA_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(ACACIA_PLANKS)));
    public static readonly Voxel DARK_OAK_STAIRS = register("dark_oak_stairs", new StairVoxel(DARK_OAK_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(DARK_OAK_PLANKS)));
    public static readonly Voxel MANGROVE_STAIRS = register("mangrove_stairs", new StairVoxel(MANGROVE_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(MANGROVE_PLANKS)));
    public static readonly Voxel BAMBOO_STAIRS = register("bamboo_stairs", new StairVoxel(BAMBOO_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(BAMBOO_PLANKS)));
    public static readonly Voxel BAMBOO_MOSAIC_STAIRS = register("bamboo_mosaic_stairs", new StairVoxel(BAMBOO_MOSAIC.defaultVoxelState(), VoxelBehaviour.Properties.copy(BAMBOO_MOSAIC)));
    public static readonly Voxel SLIME_BLOCK = register("slime_block", new SlimeVoxel(VoxelBehaviour.Properties.of(Material.CLAY, MaterialColor.GRASS).friction(0.8F).sound(SoundType.SLIME_BLOCK).noOcclusion()));
    public static readonly Voxel BARRIER = register("barrier", new BarrierVoxel(VoxelBehaviour.Properties.of(Material.BARRIER).strength(-1.0F, 3600000.8F).noLootTable().noOcclusion().isValidSpawn(Voxels::never).noParticlesOnBreak()));
    public static readonly Voxel LIGHT = register("light", new LightVoxel(VoxelBehaviour.Properties.of(Material.AIR).strength(-1.0F, 3600000.8F).noLootTable().noOcclusion().lightLevel(LightVoxel.LIGHT_EMISSION)));
    public static readonly Voxel IRON_TRAPDOOR = register("iron_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().strength(5.0F).sound(SoundType.METAL).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.IRON_TRAPDOOR_CLOSE, SoundEvents.IRON_TRAPDOOR_OPEN));
    public static readonly Voxel PRISMARINE = register("prismarine", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel PRISMARINE_BRICKS = register("prismarine_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.DIAMOND).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel DARK_PRISMARINE = register("dark_prismarine", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.DIAMOND).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel PRISMARINE_STAIRS = register("prismarine_stairs", new StairVoxel(PRISMARINE.defaultVoxelState(), VoxelBehaviour.Properties.copy(PRISMARINE)));
    public static readonly Voxel PRISMARINE_BRICK_STAIRS = register("prismarine_brick_stairs", new StairVoxel(PRISMARINE_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(PRISMARINE_BRICKS)));
    public static readonly Voxel DARK_PRISMARINE_STAIRS = register("dark_prismarine_stairs", new StairVoxel(DARK_PRISMARINE.defaultVoxelState(), VoxelBehaviour.Properties.copy(DARK_PRISMARINE)));
    public static readonly Voxel PRISMARINE_SLAB = register("prismarine_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel PRISMARINE_BRICK_SLAB = register("prismarine_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.DIAMOND).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel DARK_PRISMARINE_SLAB = register("dark_prismarine_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.DIAMOND).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel SEA_LANTERN = register("sea_lantern", new Voxel(VoxelBehaviour.Properties.of(Material.GLASS, MaterialColor.QUARTZ).strength(0.3F).sound(SoundType.GLASS).lightLevel((p_152688_) => {
        return 15;
    })));
    public static readonly Voxel HAY_BLOCK = register("hay_block", new HayVoxel(VoxelBehaviour.Properties.of(Material.GRASS, MaterialColor.COLOR_YELLOW).strength(0.5F).sound(SoundType.GRASS)));
    public static readonly Voxel WHITE_CARPET = register("white_carpet", new WoolCarpetVoxel(DyeColor.WHITE, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.SNOW).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel ORANGE_CARPET = register("orange_carpet", new WoolCarpetVoxel(DyeColor.ORANGE, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_ORANGE).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel MAGENTA_CARPET = register("magenta_carpet", new WoolCarpetVoxel(DyeColor.MAGENTA, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_MAGENTA).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel LIGHT_BLUE_CARPET = register("light_blue_carpet", new WoolCarpetVoxel(DyeColor.LIGHT_BLUE, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_LIGHT_BLUE).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel YELLOW_CARPET = register("yellow_carpet", new WoolCarpetVoxel(DyeColor.YELLOW, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_YELLOW).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel LIME_CARPET = register("lime_carpet", new WoolCarpetVoxel(DyeColor.LIME, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_LIGHT_GREEN).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel PINK_CARPET = register("pink_carpet", new WoolCarpetVoxel(DyeColor.PINK, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_PINK).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel GRAY_CARPET = register("gray_carpet", new WoolCarpetVoxel(DyeColor.GRAY, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_GRAY).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel LIGHT_GRAY_CARPET = register("light_gray_carpet", new WoolCarpetVoxel(DyeColor.LIGHT_GRAY, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_LIGHT_GRAY).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel CYAN_CARPET = register("cyan_carpet", new WoolCarpetVoxel(DyeColor.CYAN, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_CYAN).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel PURPLE_CARPET = register("purple_carpet", new WoolCarpetVoxel(DyeColor.PURPLE, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_PURPLE).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel BLUE_CARPET = register("blue_carpet", new WoolCarpetVoxel(DyeColor.BLUE, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_BLUE).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel BROWN_CARPET = register("brown_carpet", new WoolCarpetVoxel(DyeColor.BROWN, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_BROWN).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel GREEN_CARPET = register("green_carpet", new WoolCarpetVoxel(DyeColor.GREEN, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_GREEN).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel RED_CARPET = register("red_carpet", new WoolCarpetVoxel(DyeColor.RED, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_RED).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel BLACK_CARPET = register("black_carpet", new WoolCarpetVoxel(DyeColor.BLACK, VoxelBehaviour.Properties.of(Material.CLOTH_DECORATION, MaterialColor.COLOR_BLACK).strength(0.1F).sound(SoundType.WOOL)));
    public static readonly Voxel TERRACOTTA = register("terracotta", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(1.25F, 4.2F)));
    public static readonly Voxel COAL_BLOCK = register("coal_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(5.0F, 6.0F)));
    public static readonly Voxel PACKED_ICE = register("packed_ice", new Voxel(VoxelBehaviour.Properties.of(Material.ICE_SOLID).friction(0.98F).strength(0.5F).sound(SoundType.GLASS)));
    public static readonly Voxel SUNFLOWER = register("sunflower", new TallFlowerVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel LILAC = register("lilac", new TallFlowerVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel ROSE_BUSH = register("rose_bush", new TallFlowerVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel PEONY = register("peony", new TallFlowerVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel TALL_GRASS = register("tall_grass", new DoublePlantVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel LARGE_FERN = register("large_fern", new DoublePlantVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT).noCollission().instabreak().sound(SoundType.GRASS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel WHITE_BANNER = register("white_banner", new BannerVoxel(DyeColor.WHITE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel ORANGE_BANNER = register("orange_banner", new BannerVoxel(DyeColor.ORANGE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel MAGENTA_BANNER = register("magenta_banner", new BannerVoxel(DyeColor.MAGENTA, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel LIGHT_BLUE_BANNER = register("light_blue_banner", new BannerVoxel(DyeColor.LIGHT_BLUE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel YELLOW_BANNER = register("yellow_banner", new BannerVoxel(DyeColor.YELLOW, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel LIME_BANNER = register("lime_banner", new BannerVoxel(DyeColor.LIME, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel PINK_BANNER = register("pink_banner", new BannerVoxel(DyeColor.PINK, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel GRAY_BANNER = register("gray_banner", new BannerVoxel(DyeColor.GRAY, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel LIGHT_GRAY_BANNER = register("light_gray_banner", new BannerVoxel(DyeColor.LIGHT_GRAY, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel CYAN_BANNER = register("cyan_banner", new BannerVoxel(DyeColor.CYAN, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel PURPLE_BANNER = register("purple_banner", new BannerVoxel(DyeColor.PURPLE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BLUE_BANNER = register("blue_banner", new BannerVoxel(DyeColor.BLUE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BROWN_BANNER = register("brown_banner", new BannerVoxel(DyeColor.BROWN, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel GREEN_BANNER = register("green_banner", new BannerVoxel(DyeColor.GREEN, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel RED_BANNER = register("red_banner", new BannerVoxel(DyeColor.RED, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BLACK_BANNER = register("black_banner", new BannerVoxel(DyeColor.BLACK, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD)));
    public static readonly Voxel WHITE_WALL_BANNER = register("white_wall_banner", new WallBannerVoxel(DyeColor.WHITE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(WHITE_BANNER)));
    public static readonly Voxel ORANGE_WALL_BANNER = register("orange_wall_banner", new WallBannerVoxel(DyeColor.ORANGE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(ORANGE_BANNER)));
    public static readonly Voxel MAGENTA_WALL_BANNER = register("magenta_wall_banner", new WallBannerVoxel(DyeColor.MAGENTA, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(MAGENTA_BANNER)));
    public static readonly Voxel LIGHT_BLUE_WALL_BANNER = register("light_blue_wall_banner", new WallBannerVoxel(DyeColor.LIGHT_BLUE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(LIGHT_BLUE_BANNER)));
    public static readonly Voxel YELLOW_WALL_BANNER = register("yellow_wall_banner", new WallBannerVoxel(DyeColor.YELLOW, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(YELLOW_BANNER)));
    public static readonly Voxel LIME_WALL_BANNER = register("lime_wall_banner", new WallBannerVoxel(DyeColor.LIME, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(LIME_BANNER)));
    public static readonly Voxel PINK_WALL_BANNER = register("pink_wall_banner", new WallBannerVoxel(DyeColor.PINK, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(PINK_BANNER)));
    public static readonly Voxel GRAY_WALL_BANNER = register("gray_wall_banner", new WallBannerVoxel(DyeColor.GRAY, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(GRAY_BANNER)));
    public static readonly Voxel LIGHT_GRAY_WALL_BANNER = register("light_gray_wall_banner", new WallBannerVoxel(DyeColor.LIGHT_GRAY, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(LIGHT_GRAY_BANNER)));
    public static readonly Voxel CYAN_WALL_BANNER = register("cyan_wall_banner", new WallBannerVoxel(DyeColor.CYAN, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(CYAN_BANNER)));
    public static readonly Voxel PURPLE_WALL_BANNER = register("purple_wall_banner", new WallBannerVoxel(DyeColor.PURPLE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(PURPLE_BANNER)));
    public static readonly Voxel BLUE_WALL_BANNER = register("blue_wall_banner", new WallBannerVoxel(DyeColor.BLUE, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(BLUE_BANNER)));
    public static readonly Voxel BROWN_WALL_BANNER = register("brown_wall_banner", new WallBannerVoxel(DyeColor.BROWN, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(BROWN_BANNER)));
    public static readonly Voxel GREEN_WALL_BANNER = register("green_wall_banner", new WallBannerVoxel(DyeColor.GREEN, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(GREEN_BANNER)));
    public static readonly Voxel RED_WALL_BANNER = register("red_wall_banner", new WallBannerVoxel(DyeColor.RED, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(RED_BANNER)));
    public static readonly Voxel BLACK_WALL_BANNER = register("black_wall_banner", new WallBannerVoxel(DyeColor.BLACK, VoxelBehaviour.Properties.of(Material.WOOD).noCollission().strength(1.0F).sound(SoundType.WOOD).dropsLike(BLACK_BANNER)));
    public static readonly Voxel RED_SANDSTONE = register("red_sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel CHISELED_RED_SANDSTONE = register("chiseled_red_sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel CUT_RED_SANDSTONE = register("cut_red_sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(0.8F)));
    public static readonly Voxel RED_SANDSTONE_STAIRS = register("red_sandstone_stairs", new StairVoxel(RED_SANDSTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(RED_SANDSTONE)));
    public static readonly Voxel OAK_SLAB = register("oak_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel SPRUCE_SLAB = register("spruce_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BIRCH_SLAB = register("birch_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel JUNGLE_SLAB = register("jungle_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel ACACIA_SLAB = register("acacia_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel DARK_OAK_SLAB = register("dark_oak_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel MANGROVE_SLAB = register("mangrove_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BAMBOO_SLAB = register("bamboo_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).strength(2.0F, 3.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel BAMBOO_MOSAIC_SLAB = register("bamboo_mosaic_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).strength(2.0F, 3.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel STONE_SLAB = register("stone_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel SMOOTH_STONE_SLAB = register("smooth_stone_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel SANDSTONE_SLAB = register("sandstone_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel CUT_SANDSTONE_SLAB = register("cut_sandstone_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel PETRIFIED_OAK_SLAB = register("petrified_oak_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel COBBLESTONE_SLAB = register("cobblestone_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel BRICK_SLAB = register("brick_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_RED).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel STONE_BRICK_SLAB = register("stone_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel MUD_BRICK_SLAB = register("mud_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).requiresCorrectToolForDrops().strength(1.5F, 3.0F).sound(SoundType.MUD_BRICKS)));
    public static readonly Voxel NETHER_BRICK_SLAB = register("nether_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(2.0F, 6.0F).sound(SoundType.NETHER_BRICKS)));
    public static readonly Voxel QUARTZ_SLAB = register("quartz_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel RED_SANDSTONE_SLAB = register("red_sandstone_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel CUT_RED_SANDSTONE_SLAB = register("cut_red_sandstone_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel PURPUR_SLAB = register("purpur_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_MAGENTA).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel SMOOTH_STONE = register("smooth_stone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel SMOOTH_SANDSTONE = register("smooth_sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel SMOOTH_QUARTZ = register("smooth_quartz", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel SMOOTH_RED_SANDSTONE = register("smooth_red_sandstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(2.0F, 6.0F)));
    public static readonly Voxel SPRUCE_FENCE_GATE = register("spruce_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, SPRUCE_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static readonly Voxel BIRCH_FENCE_GATE = register("birch_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BIRCH_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static readonly Voxel JUNGLE_FENCE_GATE = register("jungle_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static readonly Voxel ACACIA_FENCE_GATE = register("acacia_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, ACACIA_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static readonly Voxel DARK_OAK_FENCE_GATE = register("dark_oak_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static readonly Voxel MANGROVE_FENCE_GATE = register("mangrove_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static readonly Voxel BAMBOO_FENCE_GATE = register("bamboo_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BAMBOO_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20), SoundEvents.BAMBOO_WOOD_FENCE_GATE_CLOSE, SoundEvents.BAMBOO_WOOD_FENCE_GATE_OPEN));
    public static readonly Voxel SPRUCE_FENCE = register("spruce_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, SPRUCE_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BIRCH_FENCE = register("birch_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BIRCH_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel JUNGLE_FENCE = register("jungle_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel ACACIA_FENCE = register("acacia_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, ACACIA_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel DARK_OAK_FENCE = register("dark_oak_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel MANGROVE_FENCE = register("mangrove_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)));
    public static readonly Voxel BAMBOO_FENCE = register("bamboo_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BAMBOO_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.BAMBOO_WOOD).requiredFeatures(FeatureFlags.UPDATE_1_20)));
    public static readonly Voxel SPRUCE_DOOR = register("spruce_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, SPRUCE_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.WOOD).noOcclusion(), SoundEvents.WOODEN_DOOR_CLOSE, SoundEvents.WOODEN_DOOR_OPEN));
    public static readonly Voxel BIRCH_DOOR = register("birch_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BIRCH_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.WOOD).noOcclusion(), SoundEvents.WOODEN_DOOR_CLOSE, SoundEvents.WOODEN_DOOR_OPEN));
    public static readonly Voxel JUNGLE_DOOR = register("jungle_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, JUNGLE_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.WOOD).noOcclusion(), SoundEvents.WOODEN_DOOR_CLOSE, SoundEvents.WOODEN_DOOR_OPEN));
    public static readonly Voxel ACACIA_DOOR = register("acacia_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, ACACIA_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.WOOD).noOcclusion(), SoundEvents.WOODEN_DOOR_CLOSE, SoundEvents.WOODEN_DOOR_OPEN));
    public static readonly Voxel DARK_OAK_DOOR = register("dark_oak_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, DARK_OAK_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.WOOD).noOcclusion(), SoundEvents.WOODEN_DOOR_CLOSE, SoundEvents.WOODEN_DOOR_OPEN));
    public static readonly Voxel MANGROVE_DOOR = register("mangrove_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MANGROVE_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.WOOD).noOcclusion(), SoundEvents.WOODEN_DOOR_CLOSE, SoundEvents.WOODEN_DOOR_OPEN));
    public static readonly Voxel BAMBOO_DOOR = register("bamboo_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.WOOD, BAMBOO_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.BAMBOO_WOOD).noOcclusion().requiredFeatures(FeatureFlags.UPDATE_1_20), SoundEvents.BAMBOO_WOOD_DOOR_CLOSE, SoundEvents.BAMBOO_WOOD_DOOR_OPEN));
    public static readonly Voxel END_ROD = register("end_rod", new EndRodVoxel(VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().lightLevel((p_152686_) => {
        return 14;
    }).sound(SoundType.WOOD).noOcclusion()));
    public static readonly Voxel CHORUS_PLANT = register("chorus_plant", new ChorusPlantVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_PURPLE).strength(0.4F).sound(SoundType.WOOD).noOcclusion()));
    public static readonly Voxel CHORUS_FLOWER = register("chorus_flower", new ChorusFlowerVoxel((ChorusPlantVoxel)CHORUS_PLANT, VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_PURPLE).randomTicks().strength(0.4F).sound(SoundType.WOOD).noOcclusion().isValidSpawn(Voxels::never)));
    public static readonly Voxel PURPUR_BLOCK = register("purpur_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_MAGENTA).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel PURPUR_PILLAR = register("purpur_pillar", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_MAGENTA).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel PURPUR_STAIRS = register("purpur_stairs", new StairVoxel(PURPUR_BLOCK.defaultVoxelState(), VoxelBehaviour.Properties.copy(PURPUR_BLOCK)));
    public static readonly Voxel END_STONE_BRICKS = register("end_stone_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(3.0F, 9.0F)));
    public static readonly Voxel BEETROOTS = register("beetroots", new BeetrootVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP)));
    public static readonly Voxel DIRT_PATH = register("dirt_path", new DirtPathVoxel(VoxelBehaviour.Properties.of(Material.DIRT).strength(0.65F).sound(SoundType.GRASS).isViewVoxeling(Voxels::always).isSuffocating(Voxels::always)));
    public static readonly Voxel END_GATEWAY = register("end_gateway", new EndGatewayVoxel(VoxelBehaviour.Properties.of(Material.PORTAL, MaterialColor.COLOR_BLACK).noCollission().lightLevel((p_187435_) => {
        return 15;
    }).strength(-1.0F, 3600000.0F).noLootTable()));
    // public static readonly Voxel REPEATING_COMMAND_BLOCK = register("repeating_command_block", new CommandVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_PURPLE).requiresCorrectToolForDrops().strength(-1.0F, 3600000.0F).noLootTable(), false));
    // public static readonly Voxel CHAIN_COMMAND_BLOCK = register("chain_command_block", new CommandVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_GREEN).requiresCorrectToolForDrops().strength(-1.0F, 3600000.0F).noLootTable(), true));
    public static readonly Voxel FROSTED_ICE = register("frosted_ice", new FrostedIceVoxel(VoxelBehaviour.Properties.of(Material.ICE).friction(0.98F).randomTicks().strength(0.5F).sound(SoundType.GLASS).noOcclusion().isValidSpawn((p_152645_, p_152646_, p_152647_, p_152648_) => {
        return p_152648_ == EntityType.POLAR_BEAR;
    })));
    public static readonly Voxel MAGMA_BLOCK = register("magma_block", new MagmaVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().lightLevel((p_152684_) => {
        return 3;
    }).randomTicks().strength(0.5F).isValidSpawn((p_187421_, p_187422_, p_187423_, p_187424_) => {
        return p_187424_.fireImmune();
    }).hasPostProcess(Voxels::always).emissiveRendering(Voxels::always)));
    public static readonly Voxel NETHER_WART_BLOCK = register("nether_wart_block", new Voxel(VoxelBehaviour.Properties.of(Material.GRASS, MaterialColor.COLOR_RED).strength(1.0F).sound(SoundType.WART_BLOCK)));
    public static readonly Voxel RED_NETHER_BRICKS = register("red_nether_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(2.0F, 6.0F).sound(SoundType.NETHER_BRICKS)));
    public static readonly Voxel BONE_BLOCK = register("bone_block", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.SAND).requiresCorrectToolForDrops().strength(2.0F).sound(SoundType.BONE_BLOCK)));
    // public static readonly Voxel STRUCTURE_VOID = register("structure_void", new StructureVoidVoxel(VoxelBehaviour.Properties.of(Material.STRUCTURAL_AIR).noCollission().noLootTable().noParticlesOnBreak()));
    public static readonly Voxel OBSERVER = register("observer", new ObserverVoxel(VoxelBehaviour.Properties.of(Material.STONE).strength(3.0F).requiresCorrectToolForDrops().isRedstoneConductor(Voxels::never)));
    // public static readonly Voxel SHULKER_BOX = register("shulker_box", shulkerBox((DyeColor)null, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL)));
    // public static readonly Voxel WHITE_SHULKER_BOX = register("white_shulker_box", shulkerBox(DyeColor.WHITE, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.SNOW)));
    // public static readonly Voxel ORANGE_SHULKER_BOX = register("orange_shulker_box", shulkerBox(DyeColor.ORANGE, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_ORANGE)));
    // public static readonly Voxel MAGENTA_SHULKER_BOX = register("magenta_shulker_box", shulkerBox(DyeColor.MAGENTA, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_MAGENTA)));
    // public static readonly Voxel LIGHT_BLUE_SHULKER_BOX = register("light_blue_shulker_box", shulkerBox(DyeColor.LIGHT_BLUE, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_LIGHT_BLUE)));
    // public static readonly Voxel YELLOW_SHULKER_BOX = register("yellow_shulker_box", shulkerBox(DyeColor.YELLOW, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_YELLOW)));
    // public static readonly Voxel LIME_SHULKER_BOX = register("lime_shulker_box", shulkerBox(DyeColor.LIME, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_LIGHT_GREEN)));
    // public static readonly Voxel PINK_SHULKER_BOX = register("pink_shulker_box", shulkerBox(DyeColor.PINK, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_PINK)));
    // public static readonly Voxel GRAY_SHULKER_BOX = register("gray_shulker_box", shulkerBox(DyeColor.GRAY, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_GRAY)));
    // public static readonly Voxel LIGHT_GRAY_SHULKER_BOX = register("light_gray_shulker_box", shulkerBox(DyeColor.LIGHT_GRAY, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_LIGHT_GRAY)));
    // public static readonly Voxel CYAN_SHULKER_BOX = register("cyan_shulker_box", shulkerBox(DyeColor.CYAN, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_CYAN)));
    // public static readonly Voxel PURPLE_SHULKER_BOX = register("purple_shulker_box", shulkerBox(DyeColor.PURPLE, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.TERRACOTTA_PURPLE)));
    // public static readonly Voxel BLUE_SHULKER_BOX = register("blue_shulker_box", shulkerBox(DyeColor.BLUE, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_BLUE)));
    // public static readonly Voxel BROWN_SHULKER_BOX = register("brown_shulker_box", shulkerBox(DyeColor.BROWN, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_BROWN)));
    // public static readonly Voxel GREEN_SHULKER_BOX = register("green_shulker_box", shulkerBox(DyeColor.GREEN, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_GREEN)));
    // public static readonly Voxel RED_SHULKER_BOX = register("red_shulker_box", shulkerBox(DyeColor.RED, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_RED)));
    // public static readonly Voxel BLACK_SHULKER_BOX = register("black_shulker_box", shulkerBox(DyeColor.BLACK, VoxelBehaviour.Properties.of(Material.SHULKER_SHELL, MaterialColor.COLOR_BLACK)));
    public static readonly Voxel WHITE_GLAZED_TERRACOTTA = register("white_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.WHITE).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel ORANGE_GLAZED_TERRACOTTA = register("orange_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.ORANGE).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel MAGENTA_GLAZED_TERRACOTTA = register("magenta_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.MAGENTA).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel LIGHT_BLUE_GLAZED_TERRACOTTA = register("light_blue_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.LIGHT_BLUE).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel YELLOW_GLAZED_TERRACOTTA = register("yellow_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.YELLOW).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel LIME_GLAZED_TERRACOTTA = register("lime_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.LIME).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel PINK_GLAZED_TERRACOTTA = register("pink_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.PINK).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel GRAY_GLAZED_TERRACOTTA = register("gray_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.GRAY).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel LIGHT_GRAY_GLAZED_TERRACOTTA = register("light_gray_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.LIGHT_GRAY).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel CYAN_GLAZED_TERRACOTTA = register("cyan_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.CYAN).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel PURPLE_GLAZED_TERRACOTTA = register("purple_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.PURPLE).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel BLUE_GLAZED_TERRACOTTA = register("blue_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.BLUE).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel BROWN_GLAZED_TERRACOTTA = register("brown_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.BROWN).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel GREEN_GLAZED_TERRACOTTA = register("green_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.GREEN).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel RED_GLAZED_TERRACOTTA = register("red_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.RED).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel BLACK_GLAZED_TERRACOTTA = register("black_glazed_terracotta", new GlazedTerracottaVoxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.BLACK).requiresCorrectToolForDrops().strength(1.4F)));
    public static readonly Voxel WHITE_CONCRETE = register("white_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.WHITE).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel ORANGE_CONCRETE = register("orange_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.ORANGE).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel MAGENTA_CONCRETE = register("magenta_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.MAGENTA).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel LIGHT_BLUE_CONCRETE = register("light_blue_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.LIGHT_BLUE).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel YELLOW_CONCRETE = register("yellow_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.YELLOW).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel LIME_CONCRETE = register("lime_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.LIME).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel PINK_CONCRETE = register("pink_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.PINK).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel GRAY_CONCRETE = register("gray_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.GRAY).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel LIGHT_GRAY_CONCRETE = register("light_gray_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.LIGHT_GRAY).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel CYAN_CONCRETE = register("cyan_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.CYAN).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel PURPLE_CONCRETE = register("purple_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.PURPLE).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel BLUE_CONCRETE = register("blue_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.BLUE).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel BROWN_CONCRETE = register("brown_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.BROWN).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel GREEN_CONCRETE = register("green_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.GREEN).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel RED_CONCRETE = register("red_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.RED).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel BLACK_CONCRETE = register("black_concrete", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, DyeColor.BLACK).requiresCorrectToolForDrops().strength(1.8F)));
    public static readonly Voxel WHITE_CONCRETE_POWDER = register("white_concrete_powder", new ConcretePowderVoxel(WHITE_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.WHITE).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel ORANGE_CONCRETE_POWDER = register("orange_concrete_powder", new ConcretePowderVoxel(ORANGE_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.ORANGE).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel MAGENTA_CONCRETE_POWDER = register("magenta_concrete_powder", new ConcretePowderVoxel(MAGENTA_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.MAGENTA).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel LIGHT_BLUE_CONCRETE_POWDER = register("light_blue_concrete_powder", new ConcretePowderVoxel(LIGHT_BLUE_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.LIGHT_BLUE).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel YELLOW_CONCRETE_POWDER = register("yellow_concrete_powder", new ConcretePowderVoxel(YELLOW_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.YELLOW).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel LIME_CONCRETE_POWDER = register("lime_concrete_powder", new ConcretePowderVoxel(LIME_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.LIME).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel PINK_CONCRETE_POWDER = register("pink_concrete_powder", new ConcretePowderVoxel(PINK_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.PINK).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel GRAY_CONCRETE_POWDER = register("gray_concrete_powder", new ConcretePowderVoxel(GRAY_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.GRAY).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel LIGHT_GRAY_CONCRETE_POWDER = register("light_gray_concrete_powder", new ConcretePowderVoxel(LIGHT_GRAY_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.LIGHT_GRAY).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel CYAN_CONCRETE_POWDER = register("cyan_concrete_powder", new ConcretePowderVoxel(CYAN_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.CYAN).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel PURPLE_CONCRETE_POWDER = register("purple_concrete_powder", new ConcretePowderVoxel(PURPLE_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.PURPLE).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel BLUE_CONCRETE_POWDER = register("blue_concrete_powder", new ConcretePowderVoxel(BLUE_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.BLUE).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel BROWN_CONCRETE_POWDER = register("brown_concrete_powder", new ConcretePowderVoxel(BROWN_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.BROWN).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel GREEN_CONCRETE_POWDER = register("green_concrete_powder", new ConcretePowderVoxel(GREEN_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.GREEN).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel RED_CONCRETE_POWDER = register("red_concrete_powder", new ConcretePowderVoxel(RED_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.RED).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel BLACK_CONCRETE_POWDER = register("black_concrete_powder", new ConcretePowderVoxel(BLACK_CONCRETE, VoxelBehaviour.Properties.of(Material.SAND, DyeColor.BLACK).strength(0.5F).sound(SoundType.SAND)));
    public static readonly Voxel KELP = register("kelp", new KelpVoxel(VoxelBehaviour.Properties.of(Material.WATER_PLANT).noCollission().randomTicks().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel KELP_PLANT = register("kelp_plant", new KelpPlantVoxel(VoxelBehaviour.Properties.of(Material.WATER_PLANT).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel DRIED_KELP_BLOCK = register("dried_kelp_block", new Voxel(VoxelBehaviour.Properties.of(Material.GRASS, MaterialColor.COLOR_GREEN).strength(0.5F, 2.5F).sound(SoundType.GRASS)));
    public static readonly Voxel TURTLE_EGG = register("turtle_egg", new TurtleEggVoxel(VoxelBehaviour.Properties.of(Material.EGG, MaterialColor.SAND).strength(0.5F).sound(SoundType.METAL).randomTicks().noOcclusion()));
    public static readonly Voxel DEAD_TUBE_CORAL_BLOCK = register("dead_tube_coral_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel DEAD_BRAIN_CORAL_BLOCK = register("dead_brain_coral_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel DEAD_BUBBLE_CORAL_BLOCK = register("dead_bubble_coral_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel DEAD_FIRE_CORAL_BLOCK = register("dead_fire_coral_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel DEAD_HORN_CORAL_BLOCK = register("dead_horn_coral_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel TUBE_CORAL_BLOCK = register("tube_coral_block", new CoralVoxel(DEAD_TUBE_CORAL_BLOCK, VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLUE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.CORAL_BLOCK)));
    public static readonly Voxel BRAIN_CORAL_BLOCK = register("brain_coral_block", new CoralVoxel(DEAD_BRAIN_CORAL_BLOCK, VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.CORAL_BLOCK)));
    public static readonly Voxel BUBBLE_CORAL_BLOCK = register("bubble_coral_block", new CoralVoxel(DEAD_BUBBLE_CORAL_BLOCK, VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.CORAL_BLOCK)));
    public static readonly Voxel FIRE_CORAL_BLOCK = register("fire_coral_block", new CoralVoxel(DEAD_FIRE_CORAL_BLOCK, VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_RED).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.CORAL_BLOCK)));
    public static readonly Voxel HORN_CORAL_BLOCK = register("horn_coral_block", new CoralVoxel(DEAD_HORN_CORAL_BLOCK, VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.CORAL_BLOCK)));
    public static readonly Voxel DEAD_TUBE_CORAL = register("dead_tube_coral", new BaseCoralPlantVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_BRAIN_CORAL = register("dead_brain_coral", new BaseCoralPlantVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_BUBBLE_CORAL = register("dead_bubble_coral", new BaseCoralPlantVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_FIRE_CORAL = register("dead_fire_coral", new BaseCoralPlantVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_HORN_CORAL = register("dead_horn_coral", new BaseCoralPlantVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel TUBE_CORAL = register("tube_coral", new CoralPlantVoxel(DEAD_TUBE_CORAL, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_BLUE).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel BRAIN_CORAL = register("brain_coral", new CoralPlantVoxel(DEAD_BRAIN_CORAL, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_PINK).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel BUBBLE_CORAL = register("bubble_coral", new CoralPlantVoxel(DEAD_BUBBLE_CORAL, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_PURPLE).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel FIRE_CORAL = register("fire_coral", new CoralPlantVoxel(DEAD_FIRE_CORAL, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_RED).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel HORN_CORAL = register("horn_coral", new CoralPlantVoxel(DEAD_HORN_CORAL, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_YELLOW).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel DEAD_TUBE_CORAL_FAN = register("dead_tube_coral_fan", new BaseCoralFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_BRAIN_CORAL_FAN = register("dead_brain_coral_fan", new BaseCoralFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_BUBBLE_CORAL_FAN = register("dead_bubble_coral_fan", new BaseCoralFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_FIRE_CORAL_FAN = register("dead_fire_coral_fan", new BaseCoralFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel DEAD_HORN_CORAL_FAN = register("dead_horn_coral_fan", new BaseCoralFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak()));
    public static readonly Voxel TUBE_CORAL_FAN = register("tube_coral_fan", new CoralFanVoxel(DEAD_TUBE_CORAL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_BLUE).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel BRAIN_CORAL_FAN = register("brain_coral_fan", new CoralFanVoxel(DEAD_BRAIN_CORAL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_PINK).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel BUBBLE_CORAL_FAN = register("bubble_coral_fan", new CoralFanVoxel(DEAD_BUBBLE_CORAL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_PURPLE).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel FIRE_CORAL_FAN = register("fire_coral_fan", new CoralFanVoxel(DEAD_FIRE_CORAL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_RED).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel HORN_CORAL_FAN = register("horn_coral_fan", new CoralFanVoxel(DEAD_HORN_CORAL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_YELLOW).noCollission().instabreak().sound(SoundType.WET_GRASS)));
    public static readonly Voxel DEAD_TUBE_CORAL_WALL_FAN = register("dead_tube_coral_wall_fan", new BaseCoralWallFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak().dropsLike(DEAD_TUBE_CORAL_FAN)));
    public static readonly Voxel DEAD_BRAIN_CORAL_WALL_FAN = register("dead_brain_coral_wall_fan", new BaseCoralWallFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak().dropsLike(DEAD_BRAIN_CORAL_FAN)));
    public static readonly Voxel DEAD_BUBBLE_CORAL_WALL_FAN = register("dead_bubble_coral_wall_fan", new BaseCoralWallFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak().dropsLike(DEAD_BUBBLE_CORAL_FAN)));
    public static readonly Voxel DEAD_FIRE_CORAL_WALL_FAN = register("dead_fire_coral_wall_fan", new BaseCoralWallFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak().dropsLike(DEAD_FIRE_CORAL_FAN)));
    public static readonly Voxel DEAD_HORN_CORAL_WALL_FAN = register("dead_horn_coral_wall_fan", new BaseCoralWallFanVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().instabreak().dropsLike(DEAD_HORN_CORAL_FAN)));
    public static readonly Voxel TUBE_CORAL_WALL_FAN = register("tube_coral_wall_fan", new CoralWallFanVoxel(DEAD_TUBE_CORAL_WALL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_BLUE).noCollission().instabreak().sound(SoundType.WET_GRASS).dropsLike(TUBE_CORAL_FAN)));
    public static readonly Voxel BRAIN_CORAL_WALL_FAN = register("brain_coral_wall_fan", new CoralWallFanVoxel(DEAD_BRAIN_CORAL_WALL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_PINK).noCollission().instabreak().sound(SoundType.WET_GRASS).dropsLike(BRAIN_CORAL_FAN)));
    public static readonly Voxel BUBBLE_CORAL_WALL_FAN = register("bubble_coral_wall_fan", new CoralWallFanVoxel(DEAD_BUBBLE_CORAL_WALL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_PURPLE).noCollission().instabreak().sound(SoundType.WET_GRASS).dropsLike(BUBBLE_CORAL_FAN)));
    public static readonly Voxel FIRE_CORAL_WALL_FAN = register("fire_coral_wall_fan", new CoralWallFanVoxel(DEAD_FIRE_CORAL_WALL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_RED).noCollission().instabreak().sound(SoundType.WET_GRASS).dropsLike(FIRE_CORAL_FAN)));
    public static readonly Voxel HORN_CORAL_WALL_FAN = register("horn_coral_wall_fan", new CoralWallFanVoxel(DEAD_HORN_CORAL_WALL_FAN, VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_YELLOW).noCollission().instabreak().sound(SoundType.WET_GRASS).dropsLike(HORN_CORAL_FAN)));
    public static readonly Voxel SEA_PICKLE = register("sea_pickle", new SeaPickleVoxel(VoxelBehaviour.Properties.of(Material.WATER_PLANT, MaterialColor.COLOR_GREEN).lightLevel((p_152680_) => {
        return SeaPickleVoxel.isDead(p_152680_) ? 0 : 3 + 3 * p_152680_.getValue(SeaPickleVoxel.PICKLES);
    }).sound(SoundType.SLIME_BLOCK).noOcclusion()));
    public static readonly Voxel BLUE_ICE = register("blue_ice", new HalfTransparentVoxel(VoxelBehaviour.Properties.of(Material.ICE_SOLID).strength(2.8F).friction(0.989F).sound(SoundType.GLASS)));
    // public static readonly Voxel CONDUIT = register("conduit", new ConduitVoxel(VoxelBehaviour.Properties.of(Material.GLASS, MaterialColor.DIAMOND).strength(3.0F).lightLevel((p_50804_) => {
    //     return 15;
    // }).noOcclusion()));
    public static readonly Voxel BAMBOO_SAPLING = register("bamboo_sapling", new BambooSaplingVoxel(VoxelBehaviour.Properties.of(Material.BAMBOO_SAPLING).randomTicks().instabreak().noCollission().strength(1.0F).sound(SoundType.BAMBOO_SAPLING).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel BAMBOO = register("bamboo", new BambooStalkVoxel(VoxelBehaviour.Properties.of(Material.BAMBOO, MaterialColor.PLANT).randomTicks().instabreak().strength(1.0F).sound(SoundType.BAMBOO).noOcclusion().dynamicShape().offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel POTTED_BAMBOO = register("potted_bamboo", new FlowerPotVoxel(BAMBOO, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel VOID_AIR = register("void_air", new AirVoxel(VoxelBehaviour.Properties.of(Material.AIR).noCollission().noLootTable().air()));
    public static readonly Voxel CAVE_AIR = register("cave_air", new AirVoxel(VoxelBehaviour.Properties.of(Material.AIR).noCollission().noLootTable().air()));
    public static readonly Voxel BUBBLE_COLUMN = register("bubble_column", new BubbleColumnVoxel(VoxelBehaviour.Properties.of(Material.BUBBLE_COLUMN).noCollission().noLootTable()));
    public static readonly Voxel POLISHED_GRANITE_STAIRS = register("polished_granite_stairs", new StairVoxel(POLISHED_GRANITE.defaultVoxelState(), VoxelBehaviour.Properties.copy(POLISHED_GRANITE)));
    public static readonly Voxel SMOOTH_RED_SANDSTONE_STAIRS = register("smooth_red_sandstone_stairs", new StairVoxel(SMOOTH_RED_SANDSTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(SMOOTH_RED_SANDSTONE)));
    public static readonly Voxel MOSSY_STONE_BRICK_STAIRS = register("mossy_stone_brick_stairs", new StairVoxel(MOSSY_STONE_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(MOSSY_STONE_BRICKS)));
    public static readonly Voxel POLISHED_DIORITE_STAIRS = register("polished_diorite_stairs", new StairVoxel(POLISHED_DIORITE.defaultVoxelState(), VoxelBehaviour.Properties.copy(POLISHED_DIORITE)));
    public static readonly Voxel MOSSY_COBBLESTONE_STAIRS = register("mossy_cobblestone_stairs", new StairVoxel(MOSSY_COBBLESTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(MOSSY_COBBLESTONE)));
    public static readonly Voxel END_STONE_BRICK_STAIRS = register("end_stone_brick_stairs", new StairVoxel(END_STONE_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(END_STONE_BRICKS)));
    public static readonly Voxel STONE_STAIRS = register("stone_stairs", new StairVoxel(STONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(STONE)));
    public static readonly Voxel SMOOTH_SANDSTONE_STAIRS = register("smooth_sandstone_stairs", new StairVoxel(SMOOTH_SANDSTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(SMOOTH_SANDSTONE)));
    public static readonly Voxel SMOOTH_QUARTZ_STAIRS = register("smooth_quartz_stairs", new StairVoxel(SMOOTH_QUARTZ.defaultVoxelState(), VoxelBehaviour.Properties.copy(SMOOTH_QUARTZ)));
    public static readonly Voxel GRANITE_STAIRS = register("granite_stairs", new StairVoxel(GRANITE.defaultVoxelState(), VoxelBehaviour.Properties.copy(GRANITE)));
    public static readonly Voxel ANDESITE_STAIRS = register("andesite_stairs", new StairVoxel(ANDESITE.defaultVoxelState(), VoxelBehaviour.Properties.copy(ANDESITE)));
    public static readonly Voxel RED_NETHER_BRICK_STAIRS = register("red_nether_brick_stairs", new StairVoxel(RED_NETHER_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(RED_NETHER_BRICKS)));
    public static readonly Voxel POLISHED_ANDESITE_STAIRS = register("polished_andesite_stairs", new StairVoxel(POLISHED_ANDESITE.defaultVoxelState(), VoxelBehaviour.Properties.copy(POLISHED_ANDESITE)));
    public static readonly Voxel DIORITE_STAIRS = register("diorite_stairs", new StairVoxel(DIORITE.defaultVoxelState(), VoxelBehaviour.Properties.copy(DIORITE)));
    public static readonly Voxel POLISHED_GRANITE_SLAB = register("polished_granite_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(POLISHED_GRANITE)));
    public static readonly Voxel SMOOTH_RED_SANDSTONE_SLAB = register("smooth_red_sandstone_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(SMOOTH_RED_SANDSTONE)));
    public static readonly Voxel MOSSY_STONE_BRICK_SLAB = register("mossy_stone_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(MOSSY_STONE_BRICKS)));
    public static readonly Voxel POLISHED_DIORITE_SLAB = register("polished_diorite_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(POLISHED_DIORITE)));
    public static readonly Voxel MOSSY_COBBLESTONE_SLAB = register("mossy_cobblestone_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(MOSSY_COBBLESTONE)));
    public static readonly Voxel END_STONE_BRICK_SLAB = register("end_stone_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(END_STONE_BRICKS)));
    public static readonly Voxel SMOOTH_SANDSTONE_SLAB = register("smooth_sandstone_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(SMOOTH_SANDSTONE)));
    public static readonly Voxel SMOOTH_QUARTZ_SLAB = register("smooth_quartz_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(SMOOTH_QUARTZ)));
    public static readonly Voxel GRANITE_SLAB = register("granite_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(GRANITE)));
    public static readonly Voxel ANDESITE_SLAB = register("andesite_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(ANDESITE)));
    public static readonly Voxel RED_NETHER_BRICK_SLAB = register("red_nether_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(RED_NETHER_BRICKS)));
    public static readonly Voxel POLISHED_ANDESITE_SLAB = register("polished_andesite_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(POLISHED_ANDESITE)));
    public static readonly Voxel DIORITE_SLAB = register("diorite_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(DIORITE)));
    public static readonly Voxel BRICK_WALL = register("brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(BRICKS)));
    public static readonly Voxel PRISMARINE_WALL = register("prismarine_wall", new WallVoxel(VoxelBehaviour.Properties.copy(PRISMARINE)));
    public static readonly Voxel RED_SANDSTONE_WALL = register("red_sandstone_wall", new WallVoxel(VoxelBehaviour.Properties.copy(RED_SANDSTONE)));
    public static readonly Voxel MOSSY_STONE_BRICK_WALL = register("mossy_stone_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(MOSSY_STONE_BRICKS)));
    public static readonly Voxel GRANITE_WALL = register("granite_wall", new WallVoxel(VoxelBehaviour.Properties.copy(GRANITE)));
    public static readonly Voxel STONE_BRICK_WALL = register("stone_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(STONE_BRICKS)));
    public static readonly Voxel MUD_BRICK_WALL = register("mud_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(MUD_BRICKS)));
    public static readonly Voxel NETHER_BRICK_WALL = register("nether_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(NETHER_BRICKS)));
    public static readonly Voxel ANDESITE_WALL = register("andesite_wall", new WallVoxel(VoxelBehaviour.Properties.copy(ANDESITE)));
    public static readonly Voxel RED_NETHER_BRICK_WALL = register("red_nether_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(RED_NETHER_BRICKS)));
    public static readonly Voxel SANDSTONE_WALL = register("sandstone_wall", new WallVoxel(VoxelBehaviour.Properties.copy(SANDSTONE)));
    public static readonly Voxel END_STONE_BRICK_WALL = register("end_stone_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(END_STONE_BRICKS)));
    public static readonly Voxel DIORITE_WALL = register("diorite_wall", new WallVoxel(VoxelBehaviour.Properties.copy(DIORITE)));
    public static readonly Voxel SCAFFOLDING = register("scaffolding", new ScaffoldingVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.SAND).noCollission().sound(SoundType.SCAFFOLDING).dynamicShape().isValidSpawn(Voxels::never)));
    public static readonly Voxel LOOM = register("loom", new LoomVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel BARREL = register("barrel", new BarrelVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel SMOKER = register("smoker", new SmokerVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.5F).lightLevel(litVoxelEmission(13))));
    public static readonly Voxel BLAST_FURNACE = register("blast_furnace", new BlastFurnaceVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.5F).lightLevel(litVoxelEmission(13))));
    public static readonly Voxel CARTOGRAPHY_TABLE = register("cartography_table", new CartographyTableVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel FLETCHING_TABLE = register("fletching_table", new FletchingTableVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel GRINDSTONE = register("grindstone", new GrindstoneVoxel(VoxelBehaviour.Properties.of(Material.HEAVY_METAL, MaterialColor.METAL).requiresCorrectToolForDrops().strength(2.0F, 6.0F).sound(SoundType.STONE)));
    public static readonly Voxel LECTERN = register("lectern", new LecternVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel SMITHING_TABLE = register("smithing_table", new SmithingTableVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
    public static readonly Voxel STONECUTTER = register("stonecutter", new StonecutterVoxel(VoxelBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.5F)));
    public static readonly Voxel BELL = register("bell", new BellVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.GOLD).requiresCorrectToolForDrops().strength(5.0F).sound(SoundType.ANVIL)));
    public static readonly Voxel LANTERN = register("lantern", new LanternVoxel(VoxelBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().strength(3.5F).sound(SoundType.LANTERN).lightLevel((p_152677_) => {
        return 15;
    }).noOcclusion()));
    public static readonly Voxel SOUL_LANTERN = register("soul_lantern", new LanternVoxel(VoxelBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().strength(3.5F).sound(SoundType.LANTERN).lightLevel((p_187433_) => {
        return 10;
    }).noOcclusion()));
    public static readonly Voxel CAMPFIRE = register("campfire", new CampfireVoxel(true, 1, VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD).lightLevel(litVoxelEmission(15)).noOcclusion()));
    public static readonly Voxel SOUL_CAMPFIRE = register("soul_campfire", new CampfireVoxel(false, 2, VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD).lightLevel(litVoxelEmission(10)).noOcclusion()));
    public static readonly Voxel SWEET_BERRY_BUSH = register("sweet_berry_bush", new SweetBerryBushVoxel(VoxelBehaviour.Properties.of(Material.PLANT).randomTicks().noCollission().sound(SoundType.SWEET_BERRY_BUSH)));
    public static readonly Voxel WARPED_STEM = register("warped_stem", netherStem(MaterialColor.WARPED_STEM));
    public static readonly Voxel STRIPPED_WARPED_STEM = register("stripped_warped_stem", netherStem(MaterialColor.WARPED_STEM));
    public static readonly Voxel WARPED_HYPHAE = register("warped_hyphae", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.WARPED_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
    public static readonly Voxel STRIPPED_WARPED_HYPHAE = register("stripped_warped_hyphae", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.WARPED_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
    public static readonly Voxel WARPED_NYLIUM = register("warped_nylium", new NyliumVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.WARPED_NYLIUM).requiresCorrectToolForDrops().strength(0.4F).sound(SoundType.NYLIUM).randomTicks()));
    public static readonly Voxel WARPED_FUNGUS = register("warped_fungus", new FungusVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_CYAN).instabreak().noCollission().sound(SoundType.FUNGUS), TreeFeatures.WARPED_FUNGUS_PLANTED, WARPED_NYLIUM));
    public static readonly Voxel WARPED_WART_BLOCK = register("warped_wart_block", new Voxel(VoxelBehaviour.Properties.of(Material.GRASS, MaterialColor.WARPED_WART_BLOCK).strength(1.0F).sound(SoundType.WART_BLOCK)));
    public static readonly Voxel WARPED_ROOTS = register("warped_roots", new RootsVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_FIREPROOF_PLANT, MaterialColor.COLOR_CYAN).noCollission().instabreak().sound(SoundType.ROOTS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel NETHER_SPROUTS = register("nether_sprouts", new NetherSproutsVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_FIREPROOF_PLANT, MaterialColor.COLOR_CYAN).noCollission().instabreak().sound(SoundType.NETHER_SPROUTS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel CRIMSON_STEM = register("crimson_stem", netherStem(MaterialColor.CRIMSON_STEM));
    public static readonly Voxel STRIPPED_CRIMSON_STEM = register("stripped_crimson_stem", netherStem(MaterialColor.CRIMSON_STEM));
    public static readonly Voxel CRIMSON_HYPHAE = register("crimson_hyphae", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.CRIMSON_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
    public static readonly Voxel STRIPPED_CRIMSON_HYPHAE = register("stripped_crimson_hyphae", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.CRIMSON_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
    public static readonly Voxel CRIMSON_NYLIUM = register("crimson_nylium", new NyliumVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.CRIMSON_NYLIUM).requiresCorrectToolForDrops().strength(0.4F).sound(SoundType.NYLIUM).randomTicks()));
    public static readonly Voxel CRIMSON_FUNGUS = register("crimson_fungus", new FungusVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.NETHER).instabreak().noCollission().sound(SoundType.FUNGUS), TreeFeatures.CRIMSON_FUNGUS_PLANTED, CRIMSON_NYLIUM));
    public static readonly Voxel SHROOMLIGHT = register("shroomlight", new Voxel(VoxelBehaviour.Properties.of(Material.GRASS, MaterialColor.COLOR_RED).strength(1.0F).sound(SoundType.SHROOMLIGHT).lightLevel((p_187431_) => {
        return 15;
    })));
    public static readonly Voxel WEEPING_VINES = register("weeping_vines", new WeepingVinesVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.NETHER).randomTicks().noCollission().instabreak().sound(SoundType.WEEPING_VINES)));
    public static readonly Voxel WEEPING_VINES_PLANT = register("weeping_vines_plant", new WeepingVinesPlantVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.NETHER).noCollission().instabreak().sound(SoundType.WEEPING_VINES)));
    public static readonly Voxel TWISTING_VINES = register("twisting_vines", new TwistingVinesVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_CYAN).randomTicks().noCollission().instabreak().sound(SoundType.WEEPING_VINES)));
    public static readonly Voxel TWISTING_VINES_PLANT = register("twisting_vines_plant", new TwistingVinesPlantVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_CYAN).noCollission().instabreak().sound(SoundType.WEEPING_VINES)));
    public static readonly Voxel CRIMSON_ROOTS = register("crimson_roots", new RootsVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_FIREPROOF_PLANT, MaterialColor.NETHER).noCollission().instabreak().sound(SoundType.ROOTS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel CRIMSON_PLANKS = register("crimson_planks", new Voxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.CRIMSON_STEM).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD)));
    public static readonly Voxel WARPED_PLANKS = register("warped_planks", new Voxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.WARPED_STEM).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD)));
    public static readonly Voxel CRIMSON_SLAB = register("crimson_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD)));
    public static readonly Voxel WARPED_SLAB = register("warped_slab", new SlabVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD)));
    public static readonly Voxel CRIMSON_PRESSURE_PLATE = register("crimson_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.NETHER_WOOD), SoundEvents.NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF, SoundEvents.NETHER_WOOD_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel WARPED_PRESSURE_PLATE = register("warped_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.EVERYTHING, VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.NETHER_WOOD), SoundEvents.NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF, SoundEvents.NETHER_WOOD_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel CRIMSON_FENCE = register("crimson_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD)));
    public static readonly Voxel WARPED_FENCE = register("warped_fence", new FenceVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD)));
    public static readonly Voxel CRIMSON_TRAPDOOR = register("crimson_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.NETHER_WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.NETHER_WOOD_TRAPDOOR_CLOSE, SoundEvents.NETHER_WOOD_TRAPDOOR_OPEN));
    public static readonly Voxel WARPED_TRAPDOOR = register("warped_trapdoor", new TrapDoorVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.NETHER_WOOD).noOcclusion().isValidSpawn(Voxels::never), SoundEvents.NETHER_WOOD_TRAPDOOR_CLOSE, SoundEvents.NETHER_WOOD_TRAPDOOR_OPEN));
    public static readonly Voxel CRIMSON_FENCE_GATE = register("crimson_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
    public static readonly Voxel WARPED_FENCE_GATE = register("warped_fence_gate", new FenceGateVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
    public static readonly Voxel CRIMSON_STAIRS = register("crimson_stairs", new StairVoxel(CRIMSON_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(CRIMSON_PLANKS)));
    public static readonly Voxel WARPED_STAIRS = register("warped_stairs", new StairVoxel(WARPED_PLANKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(WARPED_PLANKS)));
    public static readonly Voxel CRIMSON_BUTTON = register("crimson_button", woodenButton(SoundType.NETHER_WOOD, SoundEvents.NETHER_WOOD_BUTTON_CLICK_OFF, SoundEvents.NETHER_WOOD_BUTTON_CLICK_ON));
    public static readonly Voxel WARPED_BUTTON = register("warped_button", woodenButton(SoundType.NETHER_WOOD, SoundEvents.NETHER_WOOD_BUTTON_CLICK_OFF, SoundEvents.NETHER_WOOD_BUTTON_CLICK_ON));
    public static readonly Voxel CRIMSON_DOOR = register("crimson_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.NETHER_WOOD).noOcclusion(), SoundEvents.NETHER_WOOD_DOOR_CLOSE, SoundEvents.NETHER_WOOD_DOOR_OPEN));
    public static readonly Voxel WARPED_DOOR = register("warped_door", new DoorVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).strength(3.0F).sound(SoundType.NETHER_WOOD).noOcclusion(), SoundEvents.NETHER_WOOD_DOOR_CLOSE, SoundEvents.NETHER_WOOD_DOOR_OPEN));
    public static readonly Voxel CRIMSON_SIGN = register("crimson_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD), WoodType.CRIMSON));
    public static readonly Voxel WARPED_SIGN = register("warped_sign", new StandingSignVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD), WoodType.WARPED));
    public static readonly Voxel CRIMSON_WALL_SIGN = register("crimson_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, CRIMSON_PLANKS.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD).dropsLike(CRIMSON_SIGN), WoodType.CRIMSON));
    public static readonly Voxel WARPED_WALL_SIGN = register("warped_wall_sign", new WallSignVoxel(VoxelBehaviour.Properties.of(Material.NETHER_WOOD, WARPED_PLANKS.defaultMaterialColor()).noCollission().strength(1.0F).sound(SoundType.NETHER_WOOD).dropsLike(WARPED_SIGN), WoodType.WARPED));
    public static readonly Voxel STRUCTURE_BLOCK = register("structure_block", new StructureVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_LIGHT_GRAY).requiresCorrectToolForDrops().strength(-1.0F, 3600000.0F).noLootTable()));
    public static readonly Voxel JIGSAW = register("jigsaw", new JigsawVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_LIGHT_GRAY).requiresCorrectToolForDrops().strength(-1.0F, 3600000.0F).noLootTable()));
    public static readonly Voxel COMPOSTER = register("composter", new ComposterVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(0.6F).sound(SoundType.WOOD)));
    public static readonly Voxel TARGET = register("target", new TargetVoxel(VoxelBehaviour.Properties.of(Material.GRASS, MaterialColor.QUARTZ).strength(0.5F).sound(SoundType.GRASS)));
    public static readonly Voxel BEE_NEST = register("bee_nest", new BeehiveVoxel(VoxelBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_YELLOW).strength(0.3F).sound(SoundType.WOOD)));
    public static readonly Voxel BEEHIVE = register("beehive", new BeehiveVoxel(VoxelBehaviour.Properties.of(Material.WOOD).strength(0.6F).sound(SoundType.WOOD)));
    public static readonly Voxel HONEY_BLOCK = register("honey_block", new HoneyVoxel(VoxelBehaviour.Properties.of(Material.CLAY, MaterialColor.COLOR_ORANGE).speedFactor(0.4F).jumpFactor(0.5F).noOcclusion().sound(SoundType.HONEY_BLOCK)));
    public static readonly Voxel HONEYCOMB_BLOCK = register("honeycomb_block", new Voxel(VoxelBehaviour.Properties.of(Material.CLAY, MaterialColor.COLOR_ORANGE).strength(0.6F).sound(SoundType.CORAL_BLOCK)));
    public static readonly Voxel NETHERITE_BLOCK = register("netherite_block", new Voxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(50.0F, 1200.0F).sound(SoundType.NETHERITE_BLOCK)));
    public static readonly Voxel ANCIENT_DEBRIS = register("ancient_debris", new Voxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(30.0F, 1200.0F).sound(SoundType.ANCIENT_DEBRIS)));
    public static readonly Voxel CRYING_OBSIDIAN = register("crying_obsidian", new CryingObsidianVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(50.0F, 1200.0F).lightLevel((p_152663_) => {
        return 10;
    })));
    public static readonly Voxel RESPAWN_ANCHOR = register("respawn_anchor", new RespawnAnchorVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(50.0F, 1200.0F).lightLevel((p_152639_) => {
        return RespawnAnchorVoxel.getScaledChargeLevel(p_152639_, 15);
    })));
    public static readonly Voxel POTTED_CRIMSON_FUNGUS = register("potted_crimson_fungus", new FlowerPotVoxel(CRIMSON_FUNGUS, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_WARPED_FUNGUS = register("potted_warped_fungus", new FlowerPotVoxel(WARPED_FUNGUS, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_CRIMSON_ROOTS = register("potted_crimson_roots", new FlowerPotVoxel(CRIMSON_ROOTS, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel POTTED_WARPED_ROOTS = register("potted_warped_roots", new FlowerPotVoxel(WARPED_ROOTS, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    public static readonly Voxel LODESTONE = register("lodestone", new Voxel(VoxelBehaviour.Properties.of(Material.HEAVY_METAL).requiresCorrectToolForDrops().strength(3.5F).sound(SoundType.LODESTONE)));
    public static readonly Voxel BLACKSTONE = register("blackstone", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel BLACKSTONE_STAIRS = register("blackstone_stairs", new StairVoxel(BLACKSTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(BLACKSTONE)));
    public static readonly Voxel BLACKSTONE_WALL = register("blackstone_wall", new WallVoxel(VoxelBehaviour.Properties.copy(BLACKSTONE)));
    public static readonly Voxel BLACKSTONE_SLAB = register("blackstone_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(BLACKSTONE).strength(2.0F, 6.0F)));
    public static readonly Voxel POLISHED_BLACKSTONE = register("polished_blackstone", new Voxel(VoxelBehaviour.Properties.copy(BLACKSTONE).strength(2.0F, 6.0F)));
    public static readonly Voxel POLISHED_BLACKSTONE_BRICKS = register("polished_blackstone_bricks", new Voxel(VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE).strength(1.5F, 6.0F)));
    public static readonly Voxel CRACKED_POLISHED_BLACKSTONE_BRICKS = register("cracked_polished_blackstone_bricks", new Voxel(VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE_BRICKS)));
    public static readonly Voxel CHISELED_POLISHED_BLACKSTONE = register("chiseled_polished_blackstone", new Voxel(VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE).strength(1.5F, 6.0F)));
    public static readonly Voxel POLISHED_BLACKSTONE_BRICK_SLAB = register("polished_blackstone_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE_BRICKS).strength(2.0F, 6.0F)));
    public static readonly Voxel POLISHED_BLACKSTONE_BRICK_STAIRS = register("polished_blackstone_brick_stairs", new StairVoxel(POLISHED_BLACKSTONE_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE_BRICKS)));
    public static readonly Voxel POLISHED_BLACKSTONE_BRICK_WALL = register("polished_blackstone_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE_BRICKS)));
    public static readonly Voxel GILDED_BLACKSTONE = register("gilded_blackstone", new Voxel(VoxelBehaviour.Properties.copy(BLACKSTONE).sound(SoundType.GILDED_BLACKSTONE)));
    public static readonly Voxel POLISHED_BLACKSTONE_STAIRS = register("polished_blackstone_stairs", new StairVoxel(POLISHED_BLACKSTONE.defaultVoxelState(), VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE)));
    public static readonly Voxel POLISHED_BLACKSTONE_SLAB = register("polished_blackstone_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE)));
    public static readonly Voxel POLISHED_BLACKSTONE_PRESSURE_PLATE = register("polished_blackstone_pressure_plate", new PressurePlateVoxel(PressurePlateVoxel.Sensitivity.MOBS, VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).requiresCorrectToolForDrops().noCollission().strength(0.5F), SoundEvents.STONE_PRESSURE_PLATE_CLICK_OFF, SoundEvents.STONE_PRESSURE_PLATE_CLICK_ON));
    public static readonly Voxel POLISHED_BLACKSTONE_BUTTON = register("polished_blackstone_button", stoneButton());
    public static readonly Voxel POLISHED_BLACKSTONE_WALL = register("polished_blackstone_wall", new WallVoxel(VoxelBehaviour.Properties.copy(POLISHED_BLACKSTONE)));
    public static readonly Voxel CHISELED_NETHER_BRICKS = register("chiseled_nether_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(2.0F, 6.0F).sound(SoundType.NETHER_BRICKS)));
    public static readonly Voxel CRACKED_NETHER_BRICKS = register("cracked_nether_bricks", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(2.0F, 6.0F).sound(SoundType.NETHER_BRICKS)));
    public static readonly Voxel QUARTZ_BRICKS = register("quartz_bricks", new Voxel(VoxelBehaviour.Properties.copy(QUARTZ_BLOCK)));
    public static readonly Voxel CANDLE = register("candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.SAND).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel WHITE_CANDLE = register("white_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.WOOL).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel ORANGE_CANDLE = register("orange_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_ORANGE).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel MAGENTA_CANDLE = register("magenta_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_MAGENTA).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel LIGHT_BLUE_CANDLE = register("light_blue_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_LIGHT_BLUE).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel YELLOW_CANDLE = register("yellow_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_YELLOW).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel LIME_CANDLE = register("lime_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_LIGHT_GREEN).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel PINK_CANDLE = register("pink_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_PINK).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel GRAY_CANDLE = register("gray_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_GRAY).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel LIGHT_GRAY_CANDLE = register("light_gray_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_LIGHT_GRAY).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel CYAN_CANDLE = register("cyan_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_CYAN).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel PURPLE_CANDLE = register("purple_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_PURPLE).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel BLUE_CANDLE = register("blue_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_BLUE).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel BROWN_CANDLE = register("brown_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_BROWN).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel GREEN_CANDLE = register("green_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_GREEN).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel RED_CANDLE = register("red_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_RED).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    public static readonly Voxel BLACK_CANDLE = register("black_candle", new CandleVoxel(VoxelBehaviour.Properties.of(Material.DECORATION, MaterialColor.COLOR_BLACK).noOcclusion().strength(0.1F).sound(SoundType.CANDLE).lightLevel(CandleVoxel.LIGHT_EMISSION)));
    // public static readonly Voxel CANDLE_CAKE = register("candle_cake", new CandleCakeVoxel(CANDLE, VoxelBehaviour.Properties.copy(CAKE).lightLevel(litVoxelEmission(3))));
    // public static readonly Voxel WHITE_CANDLE_CAKE = register("white_candle_cake", new CandleCakeVoxel(WHITE_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel ORANGE_CANDLE_CAKE = register("orange_candle_cake", new CandleCakeVoxel(ORANGE_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel MAGENTA_CANDLE_CAKE = register("magenta_candle_cake", new CandleCakeVoxel(MAGENTA_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel LIGHT_BLUE_CANDLE_CAKE = register("light_blue_candle_cake", new CandleCakeVoxel(LIGHT_BLUE_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel YELLOW_CANDLE_CAKE = register("yellow_candle_cake", new CandleCakeVoxel(YELLOW_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel LIME_CANDLE_CAKE = register("lime_candle_cake", new CandleCakeVoxel(LIME_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel PINK_CANDLE_CAKE = register("pink_candle_cake", new CandleCakeVoxel(PINK_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel GRAY_CANDLE_CAKE = register("gray_candle_cake", new CandleCakeVoxel(GRAY_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel LIGHT_GRAY_CANDLE_CAKE = register("light_gray_candle_cake", new CandleCakeVoxel(LIGHT_GRAY_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel CYAN_CANDLE_CAKE = register("cyan_candle_cake", new CandleCakeVoxel(CYAN_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel PURPLE_CANDLE_CAKE = register("purple_candle_cake", new CandleCakeVoxel(PURPLE_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel BLUE_CANDLE_CAKE = register("blue_candle_cake", new CandleCakeVoxel(BLUE_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel BROWN_CANDLE_CAKE = register("brown_candle_cake", new CandleCakeVoxel(BROWN_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel GREEN_CANDLE_CAKE = register("green_candle_cake", new CandleCakeVoxel(GREEN_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel RED_CANDLE_CAKE = register("red_candle_cake", new CandleCakeVoxel(RED_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    // public static readonly Voxel BLACK_CANDLE_CAKE = register("black_candle_cake", new CandleCakeVoxel(BLACK_CANDLE, VoxelBehaviour.Properties.copy(CANDLE_CAKE)));
    public static readonly Voxel AMETHYST_BLOCK = register("amethyst_block", new AmethystVoxel(VoxelBehaviour.Properties.of(Material.AMETHYST, MaterialColor.COLOR_PURPLE).strength(1.5F).sound(SoundType.AMETHYST).requiresCorrectToolForDrops()));
    public static readonly Voxel BUDDING_AMETHYST = register("budding_amethyst", new BuddingAmethystVoxel(VoxelBehaviour.Properties.of(Material.AMETHYST).randomTicks().strength(1.5F).sound(SoundType.AMETHYST).requiresCorrectToolForDrops()));
    public static readonly Voxel AMETHYST_CLUSTER = register("amethyst_cluster", new AmethystClusterVoxel(7, 3, VoxelBehaviour.Properties.of(Material.AMETHYST).noOcclusion().randomTicks().sound(SoundType.AMETHYST_CLUSTER).strength(1.5F).lightLevel((p_152632_) => {
        return 5;
    })));
    public static readonly Voxel LARGE_AMETHYST_BUD = register("large_amethyst_bud", new AmethystClusterVoxel(5, 3, VoxelBehaviour.Properties.copy(AMETHYST_CLUSTER).sound(SoundType.MEDIUM_AMETHYST_BUD).lightLevel((p_152629_) => {
        return 4;
    })));
    public static readonly Voxel MEDIUM_AMETHYST_BUD = register("medium_amethyst_bud", new AmethystClusterVoxel(4, 3, VoxelBehaviour.Properties.copy(AMETHYST_CLUSTER).sound(SoundType.LARGE_AMETHYST_BUD).lightLevel((p_152617_) => {
        return 2;
    })));
    public static readonly Voxel SMALL_AMETHYST_BUD = register("small_amethyst_bud", new AmethystClusterVoxel(3, 4, VoxelBehaviour.Properties.copy(AMETHYST_CLUSTER).sound(SoundType.SMALL_AMETHYST_BUD).lightLevel((p_187409_) => {
        return 1;
    })));
    public static readonly Voxel TUFF = register("tuff", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_GRAY).sound(SoundType.TUFF).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static readonly Voxel CALCITE = register("calcite", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_WHITE).sound(SoundType.CALCITE).requiresCorrectToolForDrops().strength(0.75F)));
    public static readonly Voxel TINTED_GLASS = register("tinted_glass", new TintedGlassVoxel(VoxelBehaviour.Properties.copy(GLASS).color(MaterialColor.COLOR_GRAY).noOcclusion().isValidSpawn(Voxels::never).isRedstoneConductor(Voxels::never).isSuffocating(Voxels::never).isViewVoxeling(Voxels::never)));
    public static readonly Voxel POWDER_SNOW = register("powder_snow", new PowderSnowVoxel(VoxelBehaviour.Properties.of(Material.POWDER_SNOW).strength(0.25F).sound(SoundType.POWDER_SNOW).dynamicShape()));
    public static readonly Voxel SCULK_SENSOR = register("sculk_sensor", new SculkSensorVoxel(VoxelBehaviour.Properties.of(Material.SCULK, MaterialColor.COLOR_CYAN).strength(1.5F).sound(SoundType.SCULK_SENSOR).lightLevel((p_187406_) => {
        return 1;
    }).emissiveRendering((p_187412_, p_187413_, p_187414_) => {
        return SculkSensorVoxel.getPhase(p_187412_) == SculkSensorPhase.ACTIVE;
    }), 8));
    public static readonly Voxel SCULK = register("sculk", new SculkVoxel(VoxelBehaviour.Properties.of(Material.SCULK).strength(0.2F).sound(SoundType.SCULK)));
    public static readonly Voxel SCULK_VEIN = register("sculk_vein", new SculkVeinVoxel(VoxelBehaviour.Properties.of(Material.SCULK).noCollission().strength(0.2F).sound(SoundType.SCULK_VEIN)));
    public static readonly Voxel SCULK_CATALYST = register("sculk_catalyst", new SculkCatalystVoxel(VoxelBehaviour.Properties.of(Material.SCULK).strength(3.0F, 3.0F).sound(SoundType.SCULK_CATALYST).lightLevel((p_152651_) => {
        return 6;
    })));
    public static readonly Voxel SCULK_SHRIEKER = register("sculk_shrieker", new SculkShriekerVoxel(VoxelBehaviour.Properties.of(Material.SCULK, MaterialColor.COLOR_BLACK).strength(3.0F, 3.0F).sound(SoundType.SCULK_SHRIEKER)));
    public static readonly Voxel OXIDIZED_COPPER = register("oxidized_copper", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.OXIDIZED, VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.WARPED_NYLIUM).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)));
    public static readonly Voxel WEATHERED_COPPER = register("weathered_copper", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.WEATHERED, VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.WARPED_STEM).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)));
    public static readonly Voxel EXPOSED_COPPER = register("exposed_copper", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.EXPOSED, VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.TERRACOTTA_LIGHT_GRAY).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)));
    public static readonly Voxel COPPER_BLOCK = register("copper_block", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.UNAFFECTED, VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)));
    public static readonly Voxel COPPER_ORE = register("copper_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(IRON_ORE)));
    public static readonly Voxel DEEPSLATE_COPPER_ORE = register("deepslate_copper_ore", new DropExperienceVoxel(VoxelBehaviour.Properties.copy(COPPER_ORE).color(MaterialColor.DEEPSLATE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
    public static readonly Voxel OXIDIZED_CUT_COPPER = register("oxidized_cut_copper", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.OXIDIZED, VoxelBehaviour.Properties.copy(OXIDIZED_COPPER)));
    public static readonly Voxel WEATHERED_CUT_COPPER = register("weathered_cut_copper", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.WEATHERED, VoxelBehaviour.Properties.copy(WEATHERED_COPPER)));
    public static readonly Voxel EXPOSED_CUT_COPPER = register("exposed_cut_copper", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.EXPOSED, VoxelBehaviour.Properties.copy(EXPOSED_COPPER)));
    public static readonly Voxel CUT_COPPER = register("cut_copper", new WeatheringCopperFullVoxel(WeatheringCopper.WeatherState.UNAFFECTED, VoxelBehaviour.Properties.copy(COPPER_BLOCK)));
    public static readonly Voxel OXIDIZED_CUT_COPPER_STAIRS = register("oxidized_cut_copper_stairs", new WeatheringCopperStairVoxel(WeatheringCopper.WeatherState.OXIDIZED, OXIDIZED_CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(OXIDIZED_CUT_COPPER)));
    public static readonly Voxel WEATHERED_CUT_COPPER_STAIRS = register("weathered_cut_copper_stairs", new WeatheringCopperStairVoxel(WeatheringCopper.WeatherState.WEATHERED, WEATHERED_CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(WEATHERED_COPPER)));
    public static readonly Voxel EXPOSED_CUT_COPPER_STAIRS = register("exposed_cut_copper_stairs", new WeatheringCopperStairVoxel(WeatheringCopper.WeatherState.EXPOSED, EXPOSED_CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(EXPOSED_COPPER)));
    public static readonly Voxel CUT_COPPER_STAIRS = register("cut_copper_stairs", new WeatheringCopperStairVoxel(WeatheringCopper.WeatherState.UNAFFECTED, CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(COPPER_BLOCK)));
    public static readonly Voxel OXIDIZED_CUT_COPPER_SLAB = register("oxidized_cut_copper_slab", new WeatheringCopperSlabVoxel(WeatheringCopper.WeatherState.OXIDIZED, VoxelBehaviour.Properties.copy(OXIDIZED_CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel WEATHERED_CUT_COPPER_SLAB = register("weathered_cut_copper_slab", new WeatheringCopperSlabVoxel(WeatheringCopper.WeatherState.WEATHERED, VoxelBehaviour.Properties.copy(WEATHERED_CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel EXPOSED_CUT_COPPER_SLAB = register("exposed_cut_copper_slab", new WeatheringCopperSlabVoxel(WeatheringCopper.WeatherState.EXPOSED, VoxelBehaviour.Properties.copy(EXPOSED_CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel CUT_COPPER_SLAB = register("cut_copper_slab", new WeatheringCopperSlabVoxel(WeatheringCopper.WeatherState.UNAFFECTED, VoxelBehaviour.Properties.copy(CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel WAXED_COPPER_BLOCK = register("waxed_copper_block", new Voxel(VoxelBehaviour.Properties.copy(COPPER_BLOCK)));
    public static readonly Voxel WAXED_WEATHERED_COPPER = register("waxed_weathered_copper", new Voxel(VoxelBehaviour.Properties.copy(WEATHERED_COPPER)));
    public static readonly Voxel WAXED_EXPOSED_COPPER = register("waxed_exposed_copper", new Voxel(VoxelBehaviour.Properties.copy(EXPOSED_COPPER)));
    public static readonly Voxel WAXED_OXIDIZED_COPPER = register("waxed_oxidized_copper", new Voxel(VoxelBehaviour.Properties.copy(OXIDIZED_COPPER)));
    public static readonly Voxel WAXED_OXIDIZED_CUT_COPPER = register("waxed_oxidized_cut_copper", new Voxel(VoxelBehaviour.Properties.copy(OXIDIZED_COPPER)));
    public static readonly Voxel WAXED_WEATHERED_CUT_COPPER = register("waxed_weathered_cut_copper", new Voxel(VoxelBehaviour.Properties.copy(WEATHERED_COPPER)));
    public static readonly Voxel WAXED_EXPOSED_CUT_COPPER = register("waxed_exposed_cut_copper", new Voxel(VoxelBehaviour.Properties.copy(EXPOSED_COPPER)));
    public static readonly Voxel WAXED_CUT_COPPER = register("waxed_cut_copper", new Voxel(VoxelBehaviour.Properties.copy(COPPER_BLOCK)));
    public static readonly Voxel WAXED_OXIDIZED_CUT_COPPER_STAIRS = register("waxed_oxidized_cut_copper_stairs", new StairVoxel(WAXED_OXIDIZED_CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(OXIDIZED_COPPER)));
    public static readonly Voxel WAXED_WEATHERED_CUT_COPPER_STAIRS = register("waxed_weathered_cut_copper_stairs", new StairVoxel(WAXED_WEATHERED_CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(WEATHERED_COPPER)));
    public static readonly Voxel WAXED_EXPOSED_CUT_COPPER_STAIRS = register("waxed_exposed_cut_copper_stairs", new StairVoxel(WAXED_EXPOSED_CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(EXPOSED_COPPER)));
    public static readonly Voxel WAXED_CUT_COPPER_STAIRS = register("waxed_cut_copper_stairs", new StairVoxel(WAXED_CUT_COPPER.defaultVoxelState(), VoxelBehaviour.Properties.copy(COPPER_BLOCK)));
    public static readonly Voxel WAXED_OXIDIZED_CUT_COPPER_SLAB = register("waxed_oxidized_cut_copper_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(WAXED_OXIDIZED_CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel WAXED_WEATHERED_CUT_COPPER_SLAB = register("waxed_weathered_cut_copper_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(WAXED_WEATHERED_CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel WAXED_EXPOSED_CUT_COPPER_SLAB = register("waxed_exposed_cut_copper_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(WAXED_EXPOSED_CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel WAXED_CUT_COPPER_SLAB = register("waxed_cut_copper_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(WAXED_CUT_COPPER).requiresCorrectToolForDrops()));
    public static readonly Voxel LIGHTNING_ROD = register("lightning_rod", new LightningRodVoxel(VoxelBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER).noOcclusion()));
    public static readonly Voxel POINTED_DRIPSTONE = register("pointed_dripstone", new PointedDripstoneVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_BROWN).noOcclusion().sound(SoundType.POINTED_DRIPSTONE).randomTicks().strength(1.5F, 3.0F).dynamicShape().offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel DRIPSTONE_BLOCK = register("dripstone_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_BROWN).sound(SoundType.DRIPSTONE_BLOCK).requiresCorrectToolForDrops().strength(1.5F, 1.0F)));
    public static readonly Voxel GLOWBERRY = register("cave_vines", new CaveVinesVoxel(VoxelBehaviour.Properties.of(Material.PLANT).randomTicks().noCollission().lightLevel(CaveVines.emission(14)).instabreak().sound(SoundType.CAVE_VINES)));
    public static readonly Voxel GLOWBERRY_MIDDLE = register("cave_vines_plant", new CaveVinesPlantVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().lightLevel(CaveVines.emission(14)).instabreak().sound(SoundType.CAVE_VINES)));
    public static readonly Voxel SPORE_BLOSSOM = register("spore_blossom", new SporeBlossomVoxel(VoxelBehaviour.Properties.of(Material.PLANT).instabreak().noCollission().sound(SoundType.SPORE_BLOSSOM)));
    public static readonly Voxel AZALEA = register("azalea", new AzaleaVoxel(VoxelBehaviour.Properties.of(Material.PLANT).instabreak().sound(SoundType.AZALEA).noOcclusion()));
    public static readonly Voxel FLOWERING_AZALEA = register("flowering_azalea", new AzaleaVoxel(VoxelBehaviour.Properties.of(Material.PLANT).instabreak().sound(SoundType.FLOWERING_AZALEA).noOcclusion()));
    public static readonly Voxel MOSS_CARPET = register("moss_carpet", new CarpetVoxel(VoxelBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).strength(0.1F).sound(SoundType.MOSS_CARPET)));
    public static readonly Voxel MOSS_BLOCK = register("moss_block", new MossVoxel(VoxelBehaviour.Properties.of(Material.MOSS, MaterialColor.COLOR_GREEN).strength(0.1F).sound(SoundType.MOSS)));
    public static readonly Voxel BIG_DRIPLEAF = register("big_dripleaf", new BigDripleafVoxel(VoxelBehaviour.Properties.of(Material.PLANT).strength(0.1F).sound(SoundType.BIG_DRIPLEAF)));
    public static readonly Voxel BIG_DRIPLEAF_STEM = register("big_dripleaf_stem", new BigDripleafStemVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().strength(0.1F).sound(SoundType.BIG_DRIPLEAF)));
    public static readonly Voxel SMALL_DRIPLEAF = register("small_dripleaf", new SmallDripleafVoxel(VoxelBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.SMALL_DRIPLEAF).offsetType(VoxelBehaviour.OffsetType.XYZ)));
    public static readonly Voxel HANGING_ROOTS = register("hanging_roots", new HangingRootsVoxel(VoxelBehaviour.Properties.of(Material.REPLACEABLE_PLANT, MaterialColor.DIRT).noCollission().instabreak().sound(SoundType.HANGING_ROOTS).offsetType(VoxelBehaviour.OffsetType.XZ)));
    public static readonly Voxel ROOTED_DIRT = register("rooted_dirt", new RootedDirtVoxel(VoxelBehaviour.Properties.of(Material.DIRT, MaterialColor.DIRT).strength(0.5F).sound(SoundType.ROOTED_DIRT)));
    public static readonly Voxel MUD = register("mud", new MudVoxel(VoxelBehaviour.Properties.copy(DIRT).color(MaterialColor.TERRACOTTA_CYAN).isValidSpawn(Voxels::always).isRedstoneConductor(Voxels::always).isViewVoxeling(Voxels::always).isSuffocating(Voxels::always).sound(SoundType.MUD)));
    public static readonly Voxel DEEPSLATE = register("deepslate", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.DEEPSLATE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.DEEPSLATE)));
    public static readonly Voxel COBBLED_DEEPSLATE = register("cobbled_deepslate", new Voxel(VoxelBehaviour.Properties.copy(DEEPSLATE).strength(3.5F, 6.0F)));
    public static readonly Voxel COBBLED_DEEPSLATE_STAIRS = register("cobbled_deepslate_stairs", new StairVoxel(COBBLED_DEEPSLATE.defaultVoxelState(), VoxelBehaviour.Properties.copy(COBBLED_DEEPSLATE)));
    public static readonly Voxel COBBLED_DEEPSLATE_SLAB = register("cobbled_deepslate_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(COBBLED_DEEPSLATE)));
    public static readonly Voxel COBBLED_DEEPSLATE_WALL = register("cobbled_deepslate_wall", new WallVoxel(VoxelBehaviour.Properties.copy(COBBLED_DEEPSLATE)));
    public static readonly Voxel POLISHED_DEEPSLATE = register("polished_deepslate", new Voxel(VoxelBehaviour.Properties.copy(COBBLED_DEEPSLATE).sound(SoundType.POLISHED_DEEPSLATE)));
    public static readonly Voxel POLISHED_DEEPSLATE_STAIRS = register("polished_deepslate_stairs", new StairVoxel(POLISHED_DEEPSLATE.defaultVoxelState(), VoxelBehaviour.Properties.copy(POLISHED_DEEPSLATE)));
    public static readonly Voxel POLISHED_DEEPSLATE_SLAB = register("polished_deepslate_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(POLISHED_DEEPSLATE)));
    public static readonly Voxel POLISHED_DEEPSLATE_WALL = register("polished_deepslate_wall", new WallVoxel(VoxelBehaviour.Properties.copy(POLISHED_DEEPSLATE)));
    public static readonly Voxel DEEPSLATE_TILES = register("deepslate_tiles", new Voxel(VoxelBehaviour.Properties.copy(COBBLED_DEEPSLATE).sound(SoundType.DEEPSLATE_TILES)));
    public static readonly Voxel DEEPSLATE_TILE_STAIRS = register("deepslate_tile_stairs", new StairVoxel(DEEPSLATE_TILES.defaultVoxelState(), VoxelBehaviour.Properties.copy(DEEPSLATE_TILES)));
    public static readonly Voxel DEEPSLATE_TILE_SLAB = register("deepslate_tile_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(DEEPSLATE_TILES)));
    public static readonly Voxel DEEPSLATE_TILE_WALL = register("deepslate_tile_wall", new WallVoxel(VoxelBehaviour.Properties.copy(DEEPSLATE_TILES)));
    public static readonly Voxel DEEPSLATE_BRICKS = register("deepslate_bricks", new Voxel(VoxelBehaviour.Properties.copy(COBBLED_DEEPSLATE).sound(SoundType.DEEPSLATE_BRICKS)));
    public static readonly Voxel DEEPSLATE_BRICK_STAIRS = register("deepslate_brick_stairs", new StairVoxel(DEEPSLATE_BRICKS.defaultVoxelState(), VoxelBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
    public static readonly Voxel DEEPSLATE_BRICK_SLAB = register("deepslate_brick_slab", new SlabVoxel(VoxelBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
    public static readonly Voxel DEEPSLATE_BRICK_WALL = register("deepslate_brick_wall", new WallVoxel(VoxelBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
    public static readonly Voxel CHISELED_DEEPSLATE = register("chiseled_deepslate", new Voxel(VoxelBehaviour.Properties.copy(COBBLED_DEEPSLATE).sound(SoundType.DEEPSLATE_BRICKS)));
    public static readonly Voxel CRACKED_DEEPSLATE_BRICKS = register("cracked_deepslate_bricks", new Voxel(VoxelBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
    public static readonly Voxel CRACKED_DEEPSLATE_TILES = register("cracked_deepslate_tiles", new Voxel(VoxelBehaviour.Properties.copy(DEEPSLATE_TILES)));
    // public static readonly Voxel INFESTED_DEEPSLATE = register("infested_deepslate", new InfestedRotatedPillarVoxel(DEEPSLATE, VoxelBehaviour.Properties.of(Material.CLAY, MaterialColor.DEEPSLATE).sound(SoundType.DEEPSLATE)));
    public static readonly Voxel SMOOTH_BASALT = register("smooth_basalt", new Voxel(VoxelBehaviour.Properties.copy(BASALT)));
    public static readonly Voxel RAW_IRON_BLOCK = register("raw_iron_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.RAW_IRON).requiresCorrectToolForDrops().strength(5.0F, 6.0F)));
    public static readonly Voxel RAW_COPPER_BLOCK = register("raw_copper_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(5.0F, 6.0F)));
    public static readonly Voxel RAW_GOLD_BLOCK = register("raw_gold_block", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.GOLD).requiresCorrectToolForDrops().strength(5.0F, 6.0F)));
    // public static readonly Voxel POTTED_AZALEA = register("potted_azalea_bush", new FlowerPotVoxel(AZALEA, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    // public static readonly Voxel POTTED_FLOWERING_AZALEA = register("potted_flowering_azalea_bush", new FlowerPotVoxel(FLOWERING_AZALEA, VoxelBehaviour.Properties.of(Material.DECORATION).instabreak().noOcclusion()));
    // public static readonly Voxel OCHRE_FROGLIGHT = register("ochre_froglight", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.FROGLIGHT, MaterialColor.SAND).strength(0.3F).lightLevel((p_220873_) => {
    //     return 15;
    // }).sound(SoundType.FROGLIGHT)));
    // public static readonly Voxel VERDANT_FROGLIGHT = register("verdant_froglight", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.FROGLIGHT, MaterialColor.GLOW_LICHEN).strength(0.3F).lightLevel((p_220871_) => {
    //     return 15;
    // }).sound(SoundType.FROGLIGHT)));
    // public static readonly Voxel PEARLESCENT_FROGLIGHT = register("pearlescent_froglight", new RotatedPillarVoxel(VoxelBehaviour.Properties.of(Material.FROGLIGHT, MaterialColor.COLOR_PINK).strength(0.3F).lightLevel((p_220869_) => { return 15; }).sound(SoundType.FROGLIGHT)));
    // public static readonly Voxel FROGSPAWN = register("frogspawn", new FrogspawnVoxel(VoxelBehaviour.Properties.of(Material.FROGSPAWN).instabreak().noOcclusion().noCollission().sound(SoundType.FROGSPAWN)));
    public static readonly Voxel REINFORCED_DEEPSLATE = register("reinforced_deepslate", new Voxel(VoxelBehaviour.Properties.of(Material.STONE, MaterialColor.DEEPSLATE).sound(SoundType.DEEPSLATE).strength(55.0F, 1200.0F)));

    */
}